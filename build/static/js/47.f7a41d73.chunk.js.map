{"version":3,"sources":["views/TicketTypes/AddNewType/AddNewType.js"],"names":["AddNewType","useTranslation","t","i18n","history","useHistory","useState","visible","setVisible","errorMessage","setErrorMessage","succesAdd","setSuccessAdd","loading","setLoading","tokenString","localStorage","getItem","userToken","JSON","parse","name_en","name_ar","upData","setUpData","handleData","e","target","name","value","handleAddType","a","preventDefault","fetch","global","apiUrl","method","headers","Authorization","Accept","body","stringify","responsee","json","response","console","log","success","language","messages","className","md","lg","xl","color","onClick","goBack","xs","sm","onSubmit","row","htmlFor","required","onChange","placeholder","show","onShowChange","Object","keys","map","item","i","block","type"],"mappings":"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","file":"static/js/47.f7a41d73.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCardFooter,\n  CCol,\n  CContainer,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CPagination,\n  CDataTable,\n  CSelect,\n  CFormText,\n  CTextarea,\n  CFormGroup,\n  CLabel,\n  CSwitch,\n  CInputFile,\n  CLink,\n  CFade,\n  CCollapse,\n  CBadge,\n  CRow\n} from '@coreui/react'\nimport 'react-phone-number-input/style.css'\nimport PhoneInput from 'react-phone-number-input'\nimport CIcon from '@coreui/icons-react'\nimport './AddNewType.scss'\n\nimport { CAlert } from '@coreui/react'\nimport { useHistory } from \"react-router-dom\";\nimport { useTranslation } from 'react-i18next';\n\nimport '../../../globalVar'\n// import { set } from 'core-js/core/dict'\n// import MIN_SAFE_INTEGER from 'core-js/fn/number/min-safe-integer'\nconst AddNewType = () => {\n  const [t, i18n] = useTranslation();\n  let history = useHistory();\n  const [visible, setVisible] = useState(10)\n\n  const [fetchedData, setfetchedData] = useState([])\n  const [refresh, setRefresh] = useState('')\n  const [errorMessage, setErrorMessage] = useState();\n\n  const [succesAdd, setSuccessAdd] = useState()\n  const [loading, setLoading] = useState('')\n  const tokenString = localStorage.getItem(\"token\");\n  const userToken = JSON.parse(tokenString);\n  const [pickedImg, setPickedImg] = useState('')\n  // const userId = localStorage.getItem(\"user_id\");\n  // const user_id = JSON.parse(userId);\n\n  const [upData, setUpData] = useState({\n    name_en: '',\n    name_ar: '',\n    // criteriaDirection: '',\n    // criteriaDigits: '',\n    // countryId: '',\n    // departmentAr: '',\n    // departmentEn: '',\n    // userName: '',\n    // userUserName: '',\n    // email: '',\n    // extentionNumber: '',\n    // password: '',\n    // confirmPassword: '',\n    // userPosition: '',\n    // role: '',\n    // address:''\n\n\n  })\n  const { name_en,\n    name_ar,\n\n  } = upData;\n\n  // useEffect(async () => {\n  //   const fetchCountries = async (e) => {\n  //     try {\n  //       const responsee = await fetch(\n  //         `${global.apiUrl}/super/countries?paginate=0`,\n  //         {\n  //           method: \"GET\",\n  //           headers: {\n  //             Authorization: \"Bearer \" + userToken,\n\n  //             Accept: \"application/json\",\n  //           },\n  //         }\n  //       );\n  //       const response = await responsee.json();\n  //       console.log(response);\n\n  //       if (response.success) {\n  //         setfetchedData(response.payload)\n  //       }\n\n\n  //       if (response.message && response.message == \"Unauthenticated.\") {\n  //         localStorage.removeItem(\"token\");\n  //         localStorage.clear()\n\n  //         history.push(\"/login\");\n  //       }\n\n  //     } catch (err) {\n  //       console.log(err);\n\n  //     }\n\n  //     // setLoading(false)\n\n\n  //   }\n\n  //   fetchCountries()\n  // }, [refresh])\n\n\n\n  const handleData = (e) => {\n    setUpData({ ...upData, [e.target.name]: e.target.value })\n\n    setErrorMessage('')\n    setSuccessAdd('')\n  }\n \n\n\n \n\n\n  const handleAddType = async (e) => {\n    e.preventDefault()\n    setLoading(true)\n\n    setErrorMessage('')\n    setSuccessAdd('')\n\n    try {\n      const responsee = await fetch(\n        `${global.apiUrl}/super/ticketTypes`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: \"Bearer \" + userToken,\n             \"Content-Type\": \"application/json\",\n            'Access-Control-Allow-Origin': 'https://localhost:3000',\n            'Access-Control-Allow-Credentials': 'true',\n            Accept: \"application/json\",\n          },\n          body: JSON.stringify({\n             name_ar: name_ar,\n            name_en: name_en,\n     \n          })\n          ,\n\n        }\n      );\n      const response = await responsee.json();\n      console.log('response', response);\n      console.log(response);\n      setVisible(10)\n      if (response.success) {\n        await setVisible(6)\n        setSuccessAdd(i18n.language == 'ar' ? \"تمت اضافة نوع بنجاح\" : \"New Ticket Type Added Successfuly\")\n\n\n        setUpData({\n          name_ar: '',\n          name_en: '',\n        })\n      \n      }\n      else {\n\n        setVisible(10)\n        setErrorMessage(response.messages)\n\n\n      }\n\n\n    } catch (err) {\n      console.log(err);\n\n    }\n\n    setLoading(false)\n  }\n\n\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center justify-content-center register-cont\">\n\n      <CContainer>\n\n\n        <CCard className=\"\">\n\n\n\n          <CCardHeader>\n            <CRow className=\" row-gap-15\">\n\n              <CCol md=\"6\" lg=\"6\" xl=\"6\" className=\"justify-content-center align-self-center align-items-center place-items-center text-capitalize\">\n                <strong>{i18n.language == 'ar' ? \"إضافة نوع بطاقة جديد\" : \"Add New Ticket Type\"}</strong>\n              </CCol>\n              <CCol md=\"6\" lg=\"6\" xl=\"6\" className='row-gap-15 col-gap-15'>\n          \n          <CButton color=\"success\"  className='col-lg-6  col-md-6 col-sm-12 col-xs-12 updatebtn'\n         onClick={()=>history.goBack()} >{i18n.language == 'ar' ? `رجوع` : `Back`}\n                </CButton>\n             \n          </CCol>\n            </CRow>\n          </CCardHeader>\n\n          <CRow>\n            <CCol xs=\"12\" sm=\"12\" md=\"12\" className=''>\n              <CForm onSubmit={(e) => { handleAddType(e) }}>\n                <CCardBody>\n                  <CCard>\n                    <CCardBody>\n                      <CRow >\n                     \n\n                        {/* className=\"justify-content-center\" */}\n                       \n                        <CCol md='12'> <strong>{i18n.language == 'ar' ? `معلومات النوع :` : `Type Informations :`}</strong></CCol>\n                        <CCol md=\"6\" lg=\"6\" xl=\"6\">\n                          <CFormGroup row>\n                            <CCol md=\"12\">\n                              <CLabel htmlFor=\"text-input\">{i18n.language == 'ar' ? `الاسم الانكليزي` : `English Name`}</CLabel>\n                            </CCol>\n                            <CCol xs=\"12\" md=\"12\">\n\n                              <CInput name=\"name_en\"\n                                required\n                                onChange={handleData}\n                                placeholder={i18n.language == 'ar' ? `الاسم الانكليزي` : `English Name`}\n                                value={upData.name_en} />\n                            </CCol>\n                          </CFormGroup>\n                        </CCol>\n                        <CCol md=\"6\" lg=\"6\" xl=\"6\">\n                          <CFormGroup row>\n                            <CCol md=\"12\">\n                              <CLabel htmlFor=\"text-input\">{i18n.language == 'ar' ? `الاسم العربي` : `Arabic Name`}</CLabel>\n                            </CCol>\n                            <CCol xs=\"12\" md=\"12\">\n\n                              <CInput name=\"name_ar\"\n                                required\n                                onChange={handleData}\n                                placeholder={i18n.language == 'ar' ? `الاسم العربي` : `Arabic Name`}\n                                value={upData.name_ar} />\n                            </CCol>\n                          </CFormGroup>\n                        </CCol>\n\n\n                      </CRow>\n\n\n                    </CCardBody>\n                    <CCardFooter className=\"p-4\">\n                      <CRow className=\"justify-content-center\">\n\n                        {errorMessage &&\n                          <CAlert className='col-lg-12  col-md-12 col-sm-12 col-xs-12 '\n                            color=\"danger\"\n                            // closeButton\n                            show={visible}\n                            // closeButton\n                            onShowChange={setVisible}\n                          >\n      {     Object.keys(errorMessage).map((item, i) => (\n        \n        <>{errorMessage[item]}<br/></>  \n           \n                     \n               \n         ))}\n                            {/* {errorMessage && errorMessage.map((item, i) => (\n\n                              <>{errorMessage[i]}<br /></>\n\n                            ))} */}\n                          </CAlert>}\n\n                        {succesAdd &&\n\n                          <CAlert className='col-lg-12  col-md-12 col-sm-12 col-xs-12 '\n                            color=\"success\"\n                            show={visible}\n                            // closeButton\n                            onShowChange={setVisible}\n                          // closeButton\n                          >\n                            {succesAdd}\n                          </CAlert>}\n\n                        <CCol md=\"6\" lg=\"6\" xl=\"6\" xs=\"12\" sm=\"12\" >\n                          {<CButton color=\"success\" block type='submit'>\n                            {t('Save')}\n                            {loading && <>{' '}<i className=\"fa fa-spinner fa-spin\" ></i></>} </CButton>}\n                        </CCol>\n\n                      </CRow>\n                    </CCardFooter>\n                  </CCard>\n\n\n\n                </CCardBody>\n\n              </CForm>\n            </CCol>\n          </CRow>\n\n        </CCard>\n\n\n\n\n\n\n\n      </CContainer>\n    </div>\n  )\n}\n\nexport default AddNewType\n"],"sourceRoot":""}