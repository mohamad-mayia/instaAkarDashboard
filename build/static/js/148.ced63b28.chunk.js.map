{"version":3,"sources":["views/pages/login/Login.js","globalVar.js"],"names":["Login","useTranslation","t","i18n","history","useHistory","useState","setVisible","password","setPassword","email","setEmail","emailFor","setEmailFor","errorMessage","setErrorMessage","logged","setLogged","tokenString","localStorage","getItem","JSON","parse","succesAdd","setSuccessAdd","succesmsg","setSuccessmsg","pageStatus","setPageStatus","useEffect","push","langChange","langss","changeLanguage","handelOnSubmit","e","a","preventDefault","formData","FormData","append","requestOptions2","method","headers","Accept","body","fetch","global","apiUrl","response","json","responseData","message","error","errors","payload","roles","id","Promise","resolve","setItem","stringify","token","refresh_token","then","status","console","log","handelOnSubmitGetPAss","handlePage","x","className","language","rel","type","href","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","colored","pauseOnFocusLoss","draggable","pauseOnHover","md","onSubmit","color","Object","keys","map","item","i","Fragment","name","placeholder","autoComplete","value","onChange","target","required","xs","onClick","autocomplete","role"],"mappings":"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","file":"static/js/148.ced63b28.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow\n} from '@coreui/react'\nimport { CAlert } from '@coreui/react'\nimport { ToastContainer, toast } from 'react-toastify';\nimport { useHistory } from \"react-router-dom\";\nimport CIcon from '@coreui/icons-react'\nimport \"../../../globalVar\"\nimport { useTranslation } from 'react-i18next';\nimport { Helmet } from \"react-helmet\";\nconst Login = () => {\n  const [t, i18n] = useTranslation();\n  let history = useHistory();\n  const [visible, setVisible] = useState(10)\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [extensionNumber, setExtensionNumber] = useState(\"\");\n  const [emailFor, setEmailFor] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState();\n  const [logged, setLogged] = useState('')\n  const tokenString = localStorage.getItem(\"token\");\n  const userToken = JSON.parse(tokenString);\n  const [succesAdd, setSuccessAdd] = useState()\n  const [succesmsg, setSuccessmsg] = useState()\n  const [pageStatus, setPageStatus] = useState(0)\n  useEffect(() => {\n    if (tokenString || logged) {\n      history.push(\"/\")\n    }\n  }, [logged])\n  const langChange = (langss) => { i18n.changeLanguage(langss); }\n\n\n  const handelOnSubmit = async (e) => {\n    setErrorMessage('')\n    setSuccessAdd('')\n    setSuccessmsg('')\n    e.preventDefault();\n    const formData = new FormData();\n    email && formData.append(\"email\", email);\n\n    formData.append(\"password\", password);\n    formData.append(\"remember_me\", 1);\n    const requestOptions2 = {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        // 'Content-Type': 'multipart/form-data'\n        //  ' X-Requested-With' : 'XMLHttpRequest'\n      },\n      body: formData,\n    };\n    try {\n      const response = await fetch(\n        `${global.apiUrl}api/login`,\n        requestOptions2\n      );\n      setVisible(10)\n      const responseData = await response.json();\n      if (responseData.message === \"Fail\") {\n        setErrorMessage(responseData.error);\n        return\n\n      }\n      else if (responseData.errors) {\n        setErrorMessage(responseData.errors);\n      }\n      else if (responseData.message === \"Success\" && responseData.payload.roles[0].id == 1) {\n        setErrorMessage('');\n        new Promise((resolve) => {\n          localStorage.setItem(\"token\", JSON.stringify(responseData.payload.token));\n          localStorage.setItem(\"refresh_token\", JSON.stringify(responseData.payload.refresh_token));\n          localStorage.setItem(\"id\", JSON.stringify(responseData.payload.id));\n          resolve(true)\n        }).then((status) => { setLogged(true) })\n\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const handelOnSubmitGetPAss = async (e) => {\n    setErrorMessage('')\n    setSuccessAdd('')\n    setSuccessmsg('')\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append(\"email\", emailFor);\n\n    const requestOptions2 = {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        // 'Content-Type': 'multipart/form-data'\n        //  ' X-Requested-With' : 'XMLHttpRequest'\n      },\n      body: formData,\n    };\n    try {\n      const response = await fetch(\n        `${global.apiUrl}api/forgotPassword`,\n        requestOptions2\n      );\n\n      // if (response.status == '204') {\n      //   setErrorMessage('Sorry,, This Email not registerd');\n      //   console.log(responseData.message);\n      // }\n      setVisible(10)\n      if (response.status == 200) {\n\n        setSuccessAdd(t(\"Please check your email!\"))\n        setSuccessmsg(t(\"Click Back To Login With New Password\"))\n\n\n      }\n      const responseData = await response.json();\n      if (responseData.message === \"Fail\") {\n        setErrorMessage(responseData.error);\n        return\n\n      }\n      else if (responseData.errors) {\n        setErrorMessage(responseData.errors);\n      }\n\n\n      // if (responseData.message && responseData.message !== \"Please check your email!\") {\n      //   setErrorMessage(responseData.message);\n      //   console.log(responseData.message);\n      // }\n\n\n\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n\n\n  const handlePage = (x) => {\n    setErrorMessage('')\n    setPageStatus(x)\n    setSuccessAdd('')\n    setSuccessmsg('')\n    setEmailFor(\"\")\n  }\n\n\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      {i18n.language == 'ar' &&\n        <Helmet><link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/arabicStyle/arabicStyle.css\" /></Helmet>}\n      <CContainer>\n        <ToastContainer\n          position=\"top-left\"\n          autoClose={4000}\n          hideProgressBar\n          className=\"toast-container\"\n          newestOnTop={true}\n          closeOnClick\n          rtl={i18n.language === \"ar\" ? true : false}\n          colored={true}\n          pauseOnFocusLoss\n          draggable\n          pauseOnHover\n        />\n        {pageStatus == 0 ?\n          <CRow className=\"justify-content-center\">\n            <CCol md=\"6\">\n              <CCardGroup>\n                <CCard className=\"p-4\">\n                  <CCardBody>\n                    <CForm onSubmit={(e) => { handelOnSubmit(e) }} >\n                      <h1>{i18n.language == 'ar' ? \"تسجيل الدخول\" : \"LOGIN\"}</h1>\n                      <p className=\"text-muted\">{i18n.language == 'ar' ? \"تسجيل الدخول الى حسابك\" : \"Login To Your Account\"}</p>\n                      {errorMessage && typeof errorMessage === 'object' ? <CAlert color=\"danger\">\n                        {Object.keys(errorMessage).map((item, i) => (\n                          <React.Fragment key={i}>{errorMessage[item]}<br /></React.Fragment >\n                        ))}\n                      </CAlert>\n                        :\n                        null}\n                      {errorMessage && typeof errorMessage === 'string' ? <CAlert color=\"danger\">{errorMessage} </CAlert> : null}\n                      <CInputGroup className=\"mb-3\">\n                        <CInputGroupPrepend>\n                          <CInputGroupText>\n                            <CIcon name=\"cil-user\" />\n                            {/* <CIcon name=\"cil-code\" /> */}\n                          </CInputGroupText>\n                        </CInputGroupPrepend>\n                        <CInput type=\"email\" placeholder={t(\"Email\")} autoComplete=\"email\"\n                          name=\"Username/Email\"\n                          value={email}\n                          onChange={(e) => setEmail(e.target.value)}\n                        />\n                      </CInputGroup>\n\n                      <CInputGroup className=\"mb-4\">\n                        <CInputGroupPrepend>\n                          <CInputGroupText>\n                            <CIcon name=\"cil-lock-locked\" />\n                          </CInputGroupText>\n                        </CInputGroupPrepend>\n                        <CInput required type=\"password\" placeholder={t(\"Password\")} autoComplete=\"current-password\"\n                          name=\"Password\"\n                          value={password}\n                          onChange={(e) => setPassword(e.target.value)}\n                        />\n                      </CInputGroup>\n                      <CRow>\n                        <CCol xs=\"12\" className=\"text-end\">\n                          <a color=\"link\" type='button' className=\"px-0\"\n                            onClick={() => { handlePage(1) }}>{t('Forgot password')}\n                          </a>\n                        </CCol>\n                        <CCol xs=\"6\">\n                          <CButton color=\"primary\" type='submit' className=\"px-4\">{i18n.language == 'ar' ? \"تسجيل الدخول\" : \"LOGIN\"}</CButton>\n                        </CCol>\n                        <CCol xs=\"6\" className=\"text-end\">\n\n                          {i18n.language == 'ar' ?\n                            <CButton color=\"link\" type='button' className=\"px-0\" onClick={() => { langChange('en') }}>{t('English')}\n                            </CButton>\n\n                            :\n                            <CButton color=\"link\" type='button' className=\"px-0\" onClick={() => { langChange('ar') }}>\n\n                              {t('Arabic')}\n\n                            </CButton>\n\n                          }\n                        </CCol>\n                      </CRow>\n                    </CForm>\n                  </CCardBody>\n                </CCard>\n\n              </CCardGroup>\n            </CCol>\n          </CRow>\n          :\n\n          <CRow className=\"justify-content-center\">\n            <CCol md=\"6\">\n              <CCardGroup>\n                <CCard className=\"p-4\">\n                  <CCardBody>\n                    <CForm onSubmit={(e) => { handelOnSubmitGetPAss(e) }} autocomplete=\"off\">\n                      <h1>{t('Forgot password')}</h1>\n                      <p className=\"text-muted\">\n                        {i18n.language === \"ar\" ? \"سيتم ارسال كلمة مرور جديدة الى بريدك الالكتروني\" : \"We will send a new password to your email\"}\n\n                      </p>\n                      {errorMessage && typeof errorMessage === 'object' ? <CAlert color=\"danger\">\n                        {Object.keys(errorMessage).map((item, i) => (\n                          <React.Fragment key={i}>{errorMessage[item]}<br /></React.Fragment >\n                        ))}\n                      </CAlert>\n                        :\n                        null}\n                      {errorMessage && typeof errorMessage === 'string' ? <CAlert color=\"danger\">{errorMessage} </CAlert> : null}\n                      {succesAdd && <CAlert\n                        color=\"success\"\n                      // closeButton\n                      >\n                        {succesAdd}<br></br>{succesmsg}\n                      </CAlert>}\n                      <CInputGroup className=\"mb-3\" autoComplete=\"new-off\">\n                        <CInputGroupPrepend>\n                          <CInputGroupText>\n                            <CIcon name=\"cil-user\" />\n                          </CInputGroupText>\n                        </CInputGroupPrepend>\n                        <CInput required type=\"email\"\n                          placeholder={t(\"Email\")}\n                          autocomplete=\"off\" role=\"presentation\"\n                          // name=\"email\"\n                          value={emailFor}\n                          onChange={(e) => setEmailFor(e.target.value)}\n                        />\n                      </CInputGroup>\n\n\n                      <CRow>\n                        <CCol xs=\"6\">\n                          <CButton color=\"primary\" type='submit' className=\"px-4\">{t(\"Send\")}</CButton>\n                        </CCol>\n                        <CCol xs=\"6\" className=\"text-end\">\n                          <a color=\"link\" className=\"px-0\" type='button' onClick={() => handlePage(0)} >\n                            {i18n.language === \"ar\" ? \"عودة الى تسجيل الدخول\" : \"Back To Login\"}\n                          </a>\n                        </CCol>\n                      </CRow>\n                    </CForm>\n                  </CCardBody>\n                </CCard>\n\n              </CCardGroup>\n            </CCol>\n          </CRow>\n\n        }\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Login\n","global.apiUrl = 'https://uot.sge.mybluehost.me/'\r\n\r\n"],"sourceRoot":""}