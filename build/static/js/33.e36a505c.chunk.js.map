{"version":3,"sources":["views/PakageTypes/AddNewPakageType/AddNewPakageType.js"],"names":["AddNewPakageType","useTranslation","history","useHistory","useState","visible","setVisible","errorMessage","setErrorMessage","succesAdd","setSuccessAdd","loading","setLoading","tokenString","localStorage","getItem","userToken","JSON","parse","name_en","name_ar","allowed_weight","upData","setUpData","handleData","e","target","name","value","handleAddCountry","a","preventDefault","fetch","global","apiUrl","method","headers","Authorization","Accept","body","stringify","responsee","json","response","success","errors","console","log","className","md","lg","xl","color","onClick","goBack","xs","sm","onSubmit","row","htmlFor","required","onChange","placeholder","type","min","show","onShowChange","Object","keys","map","item","i","block"],"mappings":"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","file":"static/js/33.e36a505c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCardFooter,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CPagination,\r\n  CDataTable,\r\n  CSelect,\r\n  CFormText,\r\n  CTextarea,\r\n  CFormGroup,\r\n  CLabel,\r\n  CSwitch,\r\n  CInputFile,\r\n  CLink,\r\n  CFade,\r\n  CCollapse,\r\n  CBadge,\r\n  CRow\r\n} from '@coreui/react'\r\nimport 'react-phone-number-input/style.css'\r\nimport PhoneInput from 'react-phone-number-input'\r\nimport CIcon from '@coreui/icons-react'\r\nimport './AddNewPakageType.scss'\r\n\r\nimport { CAlert } from '@coreui/react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport '../../../globalVar'\r\n// import { set } from 'core-js/core/dict'\r\n// import MIN_SAFE_INTEGER from 'core-js/fn/number/min-safe-integer'\r\nconst AddNewPakageType = () => {\r\n  const [t, i18n] = useTranslation();\r\n  let history = useHistory();\r\n  const [visible, setVisible] = useState(10)\r\n\r\n  const [fetchedData, setfetchedData] = useState([])\r\n  const [refresh, setRefresh] = useState('')\r\n  const [errorMessage, setErrorMessage] = useState();\r\n\r\n  const [succesAdd, setSuccessAdd] = useState()\r\n  const [loading, setLoading] = useState('')\r\n  const tokenString = localStorage.getItem(\"token\");\r\n  const userToken = JSON.parse(tokenString);\r\n  const [pickedImg, setPickedImg] = useState('')\r\n  // const userId = localStorage.getItem(\"user_id\");\r\n  // const user_id = JSON.parse(userId);\r\n\r\n  const [upData, setUpData] = useState({\r\n    name_en: '',\r\n    name_ar: '',\r\n    allowed_weight: '',\r\n\r\n\r\n  })\r\n  const { name_en,\r\n    name_ar,\r\n    allowed_weight,\r\n\r\n\r\n  } = upData;\r\n\r\n\r\n\r\n\r\n  const handleData = (e) => {\r\n    setUpData({ ...upData, [e.target.name]: e.target.value })\r\n\r\n    setErrorMessage('')\r\n    setSuccessAdd('')\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleAddCountry = async (e) => {\r\n    e.preventDefault()\r\n    setLoading(true)\r\n\r\n    setErrorMessage('')\r\n    setSuccessAdd('')\r\n\r\n    try {\r\n      const responsee = await fetch(\r\n        `${global.apiUrl}api/packages/addPackageType`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            Authorization: \"Bearer \" + userToken,\r\n            \"Content-Type\": \"application/json\",\r\n            'Access-Control-Allow-Origin': 'https://localhost:3000',\r\n            'Access-Control-Allow-Credentials': 'true',\r\n            Accept: \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n\r\n            name_en,\r\n            name_ar,\r\n            allowed_weight,\r\n          })\r\n          ,\r\n\r\n        }\r\n      );\r\n      const response = await responsee.json();\r\n\r\n      setVisible(10)\r\n      if (response.success) {\r\n        setVisible(6)\r\n        setSuccessAdd(\"New type has been added successfully\")\r\n        setUpData({\r\n          name_en: '',\r\n          name_ar: '',\r\n          allowed_weight: '',\r\n\r\n        })\r\n\r\n      }\r\n      else {\r\n\r\n        setVisible(10)\r\n        setErrorMessage(response.errors)\r\n\r\n\r\n      }\r\n\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n\r\n    }\r\n\r\n    setLoading(false)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"c-app c-default-layout flex-row align-items-center justify-content-center register-cont\">\r\n\r\n      <CContainer>\r\n\r\n\r\n        <CCard className=\"\">\r\n\r\n\r\n\r\n          <CCardHeader>\r\n            <CRow className=\" row-gap-15\">\r\n\r\n              <CCol md=\"6\" lg=\"6\" xl=\"6\" className=\"justify-content-center align-self-center align-items-center place-items-center text-capitalize\">\r\n                <strong>Add New Country</strong>\r\n              </CCol>\r\n              <CCol md=\"6\" lg=\"6\" xl=\"6\" className='row-gap-15 col-gap-15'>\r\n\r\n                <CButton color=\"success\" className='col-lg-6  col-md-6 col-sm-12 col-xs-12 updatebtn'\r\n                  onClick={() => history.goBack()} >Back\r\n                </CButton>\r\n\r\n              </CCol>\r\n            </CRow>\r\n          </CCardHeader>\r\n\r\n          <CRow>\r\n            <CCol xs=\"12\" sm=\"12\" md=\"12\" className=''>\r\n              <CForm onSubmit={(e) => { handleAddCountry(e) }}>\r\n                <CCardBody>\r\n                  <CCard>\r\n                    <CCardBody>\r\n                      <CRow >\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        {/* className=\"justify-content-center\" */}\r\n\r\n                        <CCol md='12'> <strong> Type Information</strong></CCol>\r\n                        <CCol md=\"6\" lg=\"6\" xl=\"6\">\r\n                          <CFormGroup row>\r\n                            <CCol md=\"12\">\r\n                              <CLabel htmlFor=\"text-input\">English Name</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"12\">\r\n\r\n                              <CInput name=\"name_en\"\r\n                                required\r\n                                onChange={handleData}\r\n                                placeholder={`English Name`}\r\n                                value={upData.name_en} />\r\n                            </CCol>\r\n                          </CFormGroup>\r\n                        </CCol>\r\n                        <CCol md=\"6\" lg=\"6\" xl=\"6\">\r\n                          <CFormGroup row>\r\n                            <CCol md=\"12\">\r\n                              <CLabel htmlFor=\"text-input\">{`Arabic Name`}</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"12\">\r\n\r\n                              <CInput name=\"name_ar\"\r\n                                required\r\n                                onChange={handleData}\r\n                                placeholder={`Arabic Name `}\r\n                                value={upData.name_ar} />\r\n                            </CCol>\r\n                          </CFormGroup>\r\n                        </CCol>\r\n                        <CCol md=\"6\" lg=\"3\" xl=\"3\">\r\n                          <CFormGroup row>\r\n                            <CCol md=\"12\">\r\n\r\n\r\n                              <CLabel htmlFor=\"text-input\">{`Allowed Weight`}</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"12\">\r\n\r\n                              <CInput name=\"allowed_weight\"\r\n                                required\r\n                                type='float'\r\n                                min='0'\r\n                                onChange={handleData}\r\n                                placeholder={`Allowed Weight`}\r\n                                value={upData.allowed_weight} />\r\n                            </CCol>\r\n                          </CFormGroup>\r\n                        </CCol>\r\n\r\n\r\n\r\n                      </CRow>\r\n\r\n\r\n                    </CCardBody>\r\n                    <CCardFooter className=\"p-4\">\r\n                      <CRow className=\"justify-content-center\">\r\n\r\n                        {errorMessage &&\r\n                          <CAlert className='col-lg-12  col-md-12 col-sm-12 col-xs-12 '\r\n                            color=\"danger\"\r\n                            // closeButton\r\n                            show={visible}\r\n                            // closeButton\r\n                            onShowChange={setVisible}\r\n                          >\r\n                            {Object.keys(errorMessage).map((item, i) => (\r\n\r\n                              <>{errorMessage[item]}<br /></>\r\n\r\n\r\n\r\n                            ))}\r\n                            {/* {errorMessage && errorMessage.map((item, i) => (\r\n\r\n                              <>{errorMessage[i]}<br /></>\r\n\r\n                            ))} */}\r\n                          </CAlert>}\r\n\r\n                        {succesAdd &&\r\n\r\n                          <CAlert className='col-lg-12  col-md-12 col-sm-12 col-xs-12 '\r\n                            color=\"success\"\r\n                            show={visible}\r\n                            // closeButton\r\n                            onShowChange={setVisible}\r\n                          // closeButton\r\n                          >\r\n                            {succesAdd}\r\n                          </CAlert>}\r\n\r\n                        <CCol md=\"6\" lg=\"6\" xl=\"6\" xs=\"12\" sm=\"12\" >\r\n                          {<CButton color=\"success\" block type='submit'>\r\n                            Save\r\n                            {loading && <>{' '}<i className=\"fa fa-spinner fa-spin\" ></i></>} </CButton>}\r\n                        </CCol>\r\n\r\n                      </CRow>\r\n                    </CCardFooter>\r\n                  </CCard>\r\n\r\n\r\n\r\n                </CCardBody>\r\n\r\n              </CForm>\r\n            </CCol>\r\n          </CRow>\r\n\r\n        </CCard>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </CContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddNewPakageType\r\n"],"sourceRoot":""}