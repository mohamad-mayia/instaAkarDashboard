{"version":3,"sources":["views/reciepients/Reciepients.js","views/AddAddressForm/AddAddressForm.js","views/DeleteAddress/DeleteAddress.js","views/Address/Address.js"],"names":["createTheme","direction","createCache","key","stylisPlugins","prefixer","rtlPlugin","Reciepients","history","useHistory","useTranslation","i18n","useState","modal","setModal","small","setSmall","addressID","setAddressID","customer","setCustomer","allCustomers","setAllCustomers","data","setData","setErrorMessage","setSuccessAdd","pageStatus","setPageStatus","tokenString","localStorage","getItem","userToken","JSON","parse","id","open","type","title","status","address","addressDetailsModal","setAddressDetailsModal","useEffect","a","e","fetch","global","apiUrl","method","headers","Authorization","Accept","responsee","json","response","console","log","success","payload","filter","item","admin","message","removeItem","clear","push","fetchUsers","activeUser","setActiveUser","getUser","itemToDelete","setItemToDelete","handleDelete","document","getElementById","style","opacity","fetchRecipients","temp","map","index","name_en","created_at","slice","name_ar","phone","email","xl","className","md","lg","row","htmlFor","xs","size","options","autoHighlight","autoComplete","value","onChange","event","newValue","val","getOptionLabel","option","name","renderOption","props","component","sx","mr","flexShrink","renderInput","params","required","label","language","inputProps","color","onClick","items","fields","hover","striped","pagination","sorter","itemsPerPage","columnFilter","scopedSlots","handleShowModal","handleShow","recipient_name_en","recipient_name_ar","recipient_phone","addresses","Fragment","Address","show","onClose","closeButton","openModal","closeModal","userID","refreshParent","AddAddress","errorMessage","visible","setVisible","succesAdd","loading","setLoading","countries","setCountries","postalCode","stateCode","countryDetails","setCountryDetails","cities","setCities","country","city","line_1","line_2","line_3","post_code","state_code","area","Block","jaddah","street","building","floor","flat","PCAIID","fetchCountries","handleCountry","Area","Jaddah","Street","Building","Floor","Flat","postal_aware","state_or_province","fetchCities","handleCity","handleAddAddress","preventDefault","url","dataNew","customer_id","outgoing","recipient_id","city_id","main","body","stringify","messages","handleAddressData","target","onSubmit","placeholder","disabled","rtl","country_name_en","country_code","width","src","toLowerCase","srcSet","alt","onShowChange","Object","keys","i","DeleteAddress","country_id"],"mappings":"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","file":"static/js/28.8a3405b7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport ReactFancyBox from 'react-fancybox'\nimport 'react-fancybox/lib/fancybox.css'\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CPagination,\n  CButton,\n  CForm,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CFormGroup,\n  CLabel,\n  CSelect,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CCardFooter\n} from '@coreui/react'\nimport { CAlert } from '@coreui/react'\nimport '../../globalVar'\nimport './Reciepients.scss'\n\nimport { useTranslation } from 'react-i18next';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nimport rtlPlugin from 'stylis-plugin-rtl';\nimport { prefixer } from 'stylis';\nimport { CacheProvider } from '@emotion/react';\nimport createCache from '@emotion/cache';\n\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport AddAddressForm from '../AddAddressForm/AddAddressForm'\nimport Address from '../Address/Address'\nimport DeleteAddress from '../DeleteAddress/DeleteAddress'\nconst theme = createTheme({\n  direction: 'rtl', // Both here and <body dir=\"rtl\">\n});\n// Create rtl cache\nconst cacheRtl = createCache({\n  key: 'muirtl',\n  stylisPlugins: [prefixer, rtlPlugin],\n});\n\n\nconst Reciepients = () => {\n  const history = useHistory()\n  const [t, i18n] = useTranslation();\n\n  const [modal, setModal] = useState(false)\n  const [small, setSmall] = useState(false)\n  const [addressID, setAddressID] = useState('')\n  const [customer, setCustomer] = useState(null)\n  const [allCustomers, setAllCustomers] = useState([])\n  const [data, setData] = useState('')\n  const [refresh, setRefresh] = useState(false)\n  const [errorMessage, setErrorMessage] = useState();\n\n  const [succesAdd, setSuccessAdd] = useState()\n  const [loading, setLoading] = useState('')\n  const [pageStatus, setPageStatus] = useState(0)\n  const tokenString = localStorage.getItem(\"token\");\n  const userToken = JSON.parse(tokenString);\n\n  const [visible, setVisible] = useState(10)\n  const [addressDetailsModal, setAddressDetailsModal] = useState({\n    id: \"\",\n    open: false,\n    type: \"\",\n    title: \"\",\n    status: \"\",\n    address: \"\"\n\n  })\n\n\n  useEffect(async () => {\n    const fetchUsers = async (e) => {\n      try {\n        const responsee = await fetch(\n          `${global.apiUrl}api/users?paginate=0`,\n          {\n            method: \"GET\",\n            headers: {\n              Authorization: \"Bearer \" + userToken,\n              Accept: \"application/json\",\n            },\n\n          }\n        );\n        const response = await responsee.json();\n        // console.log('response',response);\n        console.log('faqs', response);\n        if (response.success) {\n\n\n          setAllCustomers(response.payload.filter(item => item.admin == 0))\n          //  setTotalPages(response.payload.last_page)\n\n        }\n        if (response.message && response.message == \"Unauthenticated.\") {\n          localStorage.removeItem(\"token\");\n          localStorage.clear()\n\n          history.push(\"/login\");\n        }\n\n      } catch (err) {\n        console.log(err);\n\n      }\n\n\n\n    }\n\n    fetchUsers()\n\n  }, [])\n\n\n\n\n  const [activeUser, setActiveUser] = useState('')\n\n  const handleShow = (item) => {\n    // setActiveUser(item)\n    getUser(item.id)\n\n    setPageStatus(1)\n  }\n\n  const handleBack = (item) => {\n    setActiveUser('')\n    setPageStatus(0)\n\n  }\n\n  const getUser = async (id) => {\n\n    try {\n      const responsee = await fetch(\n        `${global.apiUrl}api/address/${customer.customer.id}?incoming=1&recipient_id=${id}`,\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: \"Bearer \" + userToken,\n\n            Accept: \"application/json\",\n          },\n        }\n      );\n      if (responsee.status == 204) {\n\n      }\n      const response = await responsee.json();\n      console.log('response', response);\n      console.log(response);\n      if (response.success == true) {\n        setActiveUser(response.payload[0])\n      }\n    } catch (err) {\n      console.log(err);\n\n    }\n  }\n\n  const [itemToDelete, setItemToDelete] = useState('')\n  const handleShowModal = (item) => {\n    setSmall(!small)\n    setItemToDelete(item)\n  }\n  const handleDelete = async () => {\n    setErrorMessage('')\n    setSuccessAdd('')\n    document.getElementById('root').style.opacity = 0.75;\n\n    try {\n      const responsee = await fetch(\n        `${global.apiUrl}api/recipients/${itemToDelete.id}`,\n        {\n          method: \"DELETE\",\n          headers: {\n            Authorization: \"Bearer \" + userToken,\n\n            Accept: \"application/json\",\n          },\n\n\n        }\n      );\n      const response = await responsee.json();\n      console.log('response', response);\n      console.log(response);\n      if (response.success == true && response.payload) {\n        setSmall(!small)\n        document.getElementById('root').style.opacity = 1;\n\n        fetchRecipients(customer.customer.id)\n\n      }\n      // else{\n      // setErrorMessage(response.errors)\n      // }\n\n    } catch (err) {\n      console.log(err);\n\n    }\n    document.getElementById('root').style.opacity = 1;\n\n  }\n\n\n  const handleCustomerChange = (val) => {\n    setCustomer(val)\n    if (val) {\n      fetchRecipients(val.customer.id)\n    }\n  }\n  const fetchRecipients = async (id) => {\n    try {\n      const responsee = await fetch(\n        `${global.apiUrl}api/address/${id}?incoming=1`,\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: \"Bearer \" + userToken,\n            Accept: \"application/json\",\n          },\n\n        }\n      );\n      const response = await responsee.json();\n      if (response.success) {\n        let temp = []\n\n        await response.payload.map((item, index) => {\n\n          temp.push({\n            ...item,\n\n            \"الاسم الانكليزي\": item.name_en,\n            \"تاريخ الانشاء\": item.created_at.slice(0, 10),\n            \"الاسم العربي\": item.name_ar,\n            \"هاتف\": item.phone ? item.phone : \"-\",\n            \"إيميل\": item.email ? item.email : \"-\"\n\n          })\n\n        })\n        setData(temp)\n\n        // if (activeUser.id) { setActiveUser(response.payload.filter(item => item.id == activeUser.id)[0]) }\n\n      }\n      if (response.message && response.message == \"Unauthenticated.\") {\n        localStorage.removeItem(\"token\");\n        localStorage.clear()\n\n        history.push(\"/login\");\n      }\n\n    } catch (err) {\n      console.log(err);\n\n    }\n\n  }\n\n  const openAddRecipent = () => {\n    setAddressDetailsModal({ id: \"\", open: true, type: \"recipient\", status: \"new\", title: \"Add New Recipient\", address: \"\" })\n  }\n  const openAddrecipientAddress = () => {\n    setAddressDetailsModal({ id: activeUser.id, open: true, type: \"recipientAddress\", status: \"new\", title: \"Add New Recipient Address\", address: \"\" })\n  }\n  const openUpdaterecipientAddress = (address) => {\n    setAddressDetailsModal({ id: activeUser.id, open: true, type: \"recipientAddress\", status: \"update\", title: \"Update Recipient Address\", address: address })\n  }\n  const openUpdaterecipient = () => {\n    setAddressDetailsModal({\n      id: activeUser.id, open: true, type: \"recipient\", status: \"update\", title: \"Update Recipient Information\",\n      address: {\n        recipient_name_en: activeUser.name_en,\n        recipient_name_ar: activeUser.name_ar,\n        recipient_phone: activeUser.phone ? activeUser.phone : \"\",\n        email: activeUser.email ? activeUser.email : \"\",\n\n\n      }\n    })\n  }\n  const CloseAddAddressModal = () => {\n    setAddressDetailsModal({ id: \"\", open: false, type: \"\", title: \"\", status: \"\", address: \"\" })\n  }\n  const openDeleteAddress = (id) => {\n    setModal(true)\n    setAddressID(id)\n  }\n  const CloseDeleteAddress = () => {\n    setModal(false)\n    setAddressID('')\n  }\n\n\n\n\n  return (\n\n    <CRow>\n      {pageStatus == 0 &&\n        <CCol xl={12}>\n          <CCard>\n            <CCardHeader>\n\n              <CRow className=\" row-gap-15\">\n\n                <CCol md=\"12\" lg=\"12\" xl=\"12\">\n\n                  <CFormGroup row>\n                    <CCol md=\"12\">\n                      <CLabel htmlFor=\"text-input\">Select Customer</CLabel>\n                    </CCol>\n                    <CCol xs=\"12\" md=\"12\">\n                      {/* <CacheProvider value={cacheRtl}>\n                        <ThemeProvider theme={theme}> */}\n                      <div  >\n                        <Autocomplete\n                          id=\"country-select-demo\"\n                          size=\"small\"\n                          options={allCustomers}\n                          autoHighlight\n                          autoComplete='off'\n\n                          value={customer}\n                          onChange={(event, newValue) => {\n                            handleCustomerChange(newValue)\n                          }}\n                          getOptionLabel={(option) => option.name + ` ( Phone : ${option.customer.phone ? option.customer.phone : '-'})`}\n                          // + ' ( id : ' + option.id + ' )'\n                          renderOption={(props, option) => (\n                            <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\n\n                              Name : {option.name} / ( Email :{option.email}) / ( Phone : {option.customer.phone ? option.customer.phone : '-'})\n                            </Box>\n                          )}\n                          // / ( Id: {option.customer.id})\n                          renderInput={(params) => (\n                            <TextField\n                              {...params}\n                              required\n                              label={i18n.language == 'ar' ? \"اختر زبون\" : \"Select Customer\"}\n                              inputProps={{\n                                ...params.inputProps,\n                                autoComplete: 'off', // disable autocomplete and autofill\n                              }}\n                            />\n                          )}\n                          required={true}\n                        />\n\n                      </div>\n                      {/* </ThemeProvider>\n                      </CacheProvider> */}\n\n\n\n\n                    </CCol>\n                  </CFormGroup>\n\n                </CCol>\n                {customer &&\n                  <> <CCol md=\"6\" lg=\"6\" xl=\"6\" className=\"justify-content-center align-self-center align-items-center place-items-center text-capitalize\">\n                    <strong>Recipients</strong>\n                  </CCol>\n\n                    <CCol md=\"6\" lg=\"6\" xl=\"6\" className='row-gap-15 col-gap-15'>\n\n                      <CButton color=\"success\" className='col-lg-6  col-md-6 col-sm-12 col-xs-12 updatebtn'\n                        onClick={() => openAddRecipent()}\n                      // history.push('/Reciepients/AddNewReciepient')\n                      >  Add New Reciepient\n                      </CButton>\n\n                    </CCol>\n                  </>\n                }\n\n\n\n\n\n\n              </CRow>\n            </CCardHeader>\n            <CCardBody className='usersTabel'>\n              {data && <CDataTable\n                items={data}\n                fields={['id',\n                  { label: \"Arabic Name\", key: 'الاسم العربي' },\n                  { label: \"English Name\", key: 'الاسم الانكليزي' },\n                  { label: \"Phone\", key: 'هاتف' },\n                  { label: \"Email\", key: 'إيميل' },\n                  { label: \"Created At\", key: 'تاريخ الانشاء' },\n                  { label: \"Actions\", key: 'عمليات' },]}\n                hover\n                striped\n                pagination\n\n                sorter\n                itemsPerPage={12}\n                columnFilter\n                // clickableRows\n                // onRowClick={(item) => history.push(`/users/${item.id}`)}\n                scopedSlots={{\n\n                  // 'الاسم': (item) => (<td>{item.name}</td>),\n                  // 'البريد الالكتروني': (item) => (<td>{item.email}</td>),\n\n                  'عمليات':\n                    (item) => (\n                      <td>\n                        <CBadge className=\"p-1 m-1 badg-click\" color=\"danger\"\n                          onClick={() => handleShowModal(item)}\n                        >{i18n.language == 'ar' ? \"حذف\" : \"Delete\"}</CBadge>\n\n                        <CBadge className=\"p-1  m-1 badg-click\" color=\"info\" onClick={() => handleShow(item)}  >\n                          {i18n.language == 'ar' ? \"عرض .....\" : \"Show....\"}</CBadge>\n\n\n\n                      </td>\n                    ),\n\n                }}\n              />}\n\n            </CCardBody>\n          </CCard>\n        </CCol>\n      }\n      {\n        pageStatus == 1 && activeUser &&\n        <CCol xl={12}>\n          <CCard>\n            <CCardHeader>\n              <CRow className=\"justify-content-center row-gap-15 \">\n\n\n\n\n                <CCol md=\"6\" lg=\"5\" className=\"justify-content-center align-self-center align-items-center place-items-center text-capitalize\">\n                  {activeUser.name_en}\n                </CCol>\n                <CCol md=\"6\" lg=\"7\" className=\" row-gap-15 col-gap-15 \">\n\n                  <CButton color=\"info\" className='col-lg-4  col-md-4 col-sm-12 col-xs-12 updatebtn'\n                    onClick={() => openUpdaterecipient()} > Update\n                  </CButton>\n                  <CButton color=\"primary\" className='col-lg-4  col-md-4 col-sm-12 col-xs-12 updatebtn'\n                    onClick={() => openAddrecipientAddress()}\n                  >         Add Address\n                  </CButton>\n                  <CButton color=\"secondary\" className='col-lg-4  col-md-4 col-sm-12 col-xs-12 updatebtn'\n                    onClick={() => handleBack()} >{i18n.language == 'ar' ? `رجوع` : `Back`}\n                  </CButton>\n\n                </CCol>\n              </CRow>\n\n            </CCardHeader>\n            <CCardBody className=''>\n\n\n\n              <CRow>\n                <CCol md='12'><strong>Reciepient Information</strong></CCol>\n                <CCol lg={6}>\n                  <table className=\"table table-striped table-hover\">\n                    <tbody>\n                      <tr >\n                        <td>Arabic Name</td>\n                        <td><strong>{activeUser.name_ar}</strong></td>\n                      </tr>\n                      <tr >\n                        <td>English Name</td>\n                        <td><strong>{activeUser.name_en}</strong></td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </CCol>\n                <CCol lg={6}>\n                  <table className=\"table table-striped table-hover\">\n                    <tbody>\n\n                      <tr >\n                        <td>     Email   </td>\n                        <td><strong>{activeUser.email ? activeUser.email : \"-\"}</strong></td>\n                      </tr>\n                      <tr >\n                        <td>   Phone     </td>\n                        <td><strong>{activeUser.phone ? activeUser.phone : '-'}</strong></td>\n                      </tr>\n\n\n\n\n\n\n\n                    </tbody>\n                  </table>\n                </CCol>\n\n                {activeUser.addresses &&\n                  activeUser.addresses.map((item, index) => {\n                    return (<React.Fragment key={item.id}>\n\n                      <CCol md='6'><strong> {`Address ${index + 1}`} </strong></CCol>\n\n                      <CCol md=\"6\" lg=\"5\" xl=\"5\" className='row-gap-15 col-gap-15'>\n\n\n                        <CButton color=\"success\" className='col-lg-6  col-md-6 col-sm-12 col-xs-12 updatebtn'\n                          onClick={() => openUpdaterecipientAddress(item)}\n                        >        updata Address\n                        </CButton>\n                        <CButton color=\"danger\" className='col-lg-6  col-md-6 col-sm-12 col-xs-12 updatebtn'\n                          onClick={() => openDeleteAddress(item.id)}\n                        >  Delete\n                        </CButton>\n\n\n\n                      </CCol>\n                      <CCol lg={12} className='mt-3'>\n                        <table className=\"table table-striped table-hover\">\n                          <tbody>\n                            <tr >\n                              <td>  <Address Address={item} /></td>\n\n                            </tr>\n\n                          </tbody>\n                        </table>\n                      </CCol>\n                    </React.Fragment>)\n                  })}\n              </CRow>\n              <hr />\n\n\n\n\n            </CCardBody>\n          </CCard>\n        </CCol>\n\n\n      }\n      <CModal\n        show={small}\n        onClose={() => setSmall(!small)}\n        size=\"sm\"\n        color='danger'\n      >\n        <CModalHeader closeButton>\n          <CModalTitle>Delete Reciepient</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          Are You Sure Want To Delete Recipient ({itemToDelete.name_en})\n\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"danger\" onClick={() => handleDelete()}>Delete</CButton>{' '}\n          <CButton color=\"secondary\" onClick={() => setSmall(!small)}>Cancel</CButton>\n        </CModalFooter>\n      </CModal>\n\n      {addressDetailsModal.open && customer.customer &&\n        <AddAddressForm\n          openModal={addressDetailsModal.open}\n          closeModal={CloseAddAddressModal}\n          type={addressDetailsModal.type}\n          address={addressDetailsModal.address}\n          id={addressDetailsModal.id}\n          title={addressDetailsModal.title}\n          status={addressDetailsModal.status}\n          userID={customer.customer.id}\n          refreshParent={addressDetailsModal.type == \"recipientAddress\" || (addressDetailsModal.type === \"recipient\" && addressDetailsModal.status === \"update\") ? getUser : fetchRecipients}\n        />}\n\n      {modal && customer.customer && activeUser &&\n        <DeleteAddress\n          openModal={modal}\n          closeModal={CloseDeleteAddress}\n          id={addressID}\n          userID={activeUser.id}\n          refreshParent={getUser}\n        />}\n    </CRow>\n  )\n}\n\nexport default Reciepients\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport 'react-fancybox/lib/fancybox.css'\r\nimport {\r\n    CButton,\r\n    CModal,\r\n    CModalBody,\r\n    CModalFooter,\r\n    CModalHeader,\r\n    CModalTitle,\r\n    CAlert,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCardFooter,\r\n    CCol,\r\n    CContainer,\r\n    CForm,\r\n    CInput,\r\n    CInputGroup,\r\n    CInputGroupPrepend,\r\n    CInputGroupText,\r\n    CPagination,\r\n    CDataTable,\r\n    CSelect,\r\n    CFormText,\r\n    CTextarea,\r\n    CFormGroup,\r\n    CLabel,\r\n    CSwitch,\r\n    CInputFile,\r\n    CLink,\r\n    CFade,\r\n    CCollapse,\r\n    CBadge,\r\n    CRow\r\n} from '@coreui/react'\r\n\r\nimport '../../globalVar'\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\n\r\nimport rtlPlugin from 'stylis-plugin-rtl';\r\nimport { prefixer } from 'stylis';\r\nimport { CacheProvider } from '@emotion/react';\r\nimport createCache from '@emotion/cache';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nconst theme = createTheme({\r\n    direction: 'rtl', // Both here and <body dir=\"rtl\">\r\n});\r\n// Create rtl cache\r\nconst cacheRtl = createCache({\r\n    key: 'muirtl',\r\n    stylisPlugins: [prefixer, rtlPlugin],\r\n});\r\nconst AddAddress = ({ address, status, title, type, openModal, closeModal, id, refreshParent, userID }) => {\r\n\r\n    const tokenString = localStorage.getItem(\"token\");\r\n    const userToken = JSON.parse(tokenString);\r\n    const [errorMessage, setErrorMessage] = useState();\r\n    const [visible, setVisible] = useState(10)\r\n    const [succesAdd, setSuccessAdd] = useState()\r\n    const [loading, setLoading] = useState('')\r\n    const [countries, setCountries] = useState([])\r\n    const [countryDetails, setCountryDetails] = useState({ postalCode: false, stateCode: false })\r\n    const [cities, setCities] = useState([])\r\n    const [data, setData] = useState({\r\n        country: null, city: null, line_1: '',\r\n        line_2: '', line_3: '', post_code: '', state_code: '',\r\n        area: \"\", Block: \"\", jaddah: \"\", street: \"\", building: \"\",\r\n        floor: \"\", flat: \"\", PCAIID: \"\",\r\n        recipient_name_en: \"\",\r\n        recipient_name_ar: \"\",\r\n        recipient_phone: \"\",\r\n        email: \"\",\r\n\r\n    })\r\n\r\n\r\n\r\n    useEffect(async () => {\r\n\r\n        const fetchCountries = async (e) => {\r\n            try {\r\n                const responsee = await fetch(`${global.apiUrl}api/countries`,\r\n                    {\r\n                        method: \"GET\",\r\n                        headers: {\r\n                            Authorization: \"Bearer \" + userToken,\r\n                            Accept: \"application/json\",\r\n                        },\r\n                    }\r\n                );\r\n                const response = await responsee.json();\r\n                if (response.success) {\r\n                    setCountries(response.payload)\r\n                    if (type === 'sendAddress' && status === \"new\") {\r\n                        handleCountry(response.payload.filter(item => item.id === 117)[0])\r\n                    }\r\n                    if ((type === 'sendAddress' || type === 'recipientAddress') && status === \"update\") {\r\n                        await handleCountry(response.payload.filter(item => item.id === address.city.country.id)[0])\r\n                        // await handleCity(address.city)\r\n                        if (address.city.country.id === 117) {\r\n                            setData({\r\n                                ...data, country: address.city.country, city: address.city,\r\n                                area: JSON.parse(address.line_1).Area,\r\n                                Block: JSON.parse(address.line_1).Block,\r\n                                jaddah: JSON.parse(address.line_1).Jaddah,\r\n                                street: JSON.parse(address.line_2).Street,\r\n                                building: JSON.parse(address.line_2).Building,\r\n                                floor: JSON.parse(address.line_3).Floor,\r\n                                flat: JSON.parse(address.line_3).Flat,\r\n                                PCAIID: JSON.parse(address.line_3).PCAIID\r\n                            })\r\n                        }\r\n                        else {\r\n                            setData({\r\n                                ...data, country: address.city.country, city: address.city,\r\n                                line_1: address.line_1,\r\n                                line_2: address.line_2 ? address.line_2 : \"\",\r\n                                line_3: address.line_3 ? address.line_3 : \"\",\r\n                                post_code: address.post_code ? address.post_code : \"\",\r\n                                state_code: address.state_code ? address.state_code : \"\",\r\n                            })\r\n                        }\r\n\r\n\r\n                    }\r\n                }\r\n\r\n            } catch (err) { console.log(err); }\r\n\r\n        }\r\n        if (type === 'recipient' && status === \"update\") {\r\n            setData({\r\n                ...data,\r\n                recipient_name_en: address.recipient_name_en,\r\n                recipient_name_ar: address.recipient_name_ar,\r\n                recipient_phone: address.recipient_phone,\r\n                email: address.email,\r\n\r\n            })\r\n\r\n        }\r\n        else {\r\n            fetchCountries()\r\n        }\r\n\r\n    }, [])\r\n    const handleCountry = async (value) => {\r\n        if (value != null) {\r\n\r\n            setData({\r\n                ...data, country: value, city: null,\r\n                post_code: value.postal_aware == 0 ? '' : data.post_code,\r\n                state_code: value.state_or_province == 0 ? '' : data.state_code,\r\n            })\r\n            fetchCities(value.id)\r\n\r\n            setCountryDetails({ postalCode: value.postal_aware !== 0, stateCode: value.state_or_province !== 0 })\r\n            // value.postal_aware == 0 && setData({ ...data, post_code: '', });\r\n            // value.state_or_province == 0 && setData({ ...data, state_code: '', });\r\n\r\n\r\n        }\r\n        else {\r\n            setCountryDetails({ postalCode: false, stateCode: false })\r\n            setData({ ...data, country: null })\r\n            setCities([])\r\n        }\r\n\r\n    }\r\n    const handleCity = async (value) => {\r\n        if (value != null) {\r\n\r\n            setData({ ...data, city: value })\r\n\r\n        }\r\n        else {\r\n            setData({ ...data, city: null })\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const fetchCities = async (id) => {\r\n        try {\r\n            const responsee = await fetch(\r\n                `${global.apiUrl}api/cities/getCityByCountryId?country_id=${id}`,\r\n                {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        Authorization: \"Bearer \" + userToken,\r\n                        Accept: \"application/json\",\r\n                    },\r\n                }\r\n            );\r\n            if (responsee.status == 204) {\r\n\r\n            }\r\n            const response = await responsee.json();\r\n            if (response.success) {\r\n                setCities(response.payload)\r\n\r\n            }\r\n\r\n        } catch (err) { console.log(err); }\r\n\r\n    }\r\n\r\n    const handleAddAddress = async (e) => {\r\n        // customer_id: profile.customer.id,\r\n\r\n        e.preventDefault()\r\n        setLoading(true)\r\n        setErrorMessage('')\r\n        setSuccessAdd('')\r\n        let url = 'api/address'\r\n\r\n        let dataNew = {\r\n            customer_id: userID,\r\n\r\n        }\r\n\r\n        if (status === \"update\" && type != \"recipient\") { url = `api/address/${address.id}?_method=put` }\r\n        if (type === 'sendAddress' && status === \"new\") { dataNew = { ...dataNew, outgoing: true, } }\r\n        if (type === 'recipient' && status === \"new\") {\r\n            dataNew = {\r\n                ...dataNew,\r\n                recipient_id: null, outgoing: false,\r\n                recipient_name_en: data.recipient_name_en,\r\n                recipient_name_ar: data.recipient_name_ar,\r\n                recipient_phone: data.recipient_phone,\r\n                email: data.email,\r\n            }\r\n        }\r\n        if (type === 'recipient' && status === \"update\") {\r\n            dataNew = {\r\n                name_en: data.recipient_name_en,\r\n                name_ar: data.recipient_name_ar,\r\n                phone: data.recipient_phone,\r\n                email: data.email,\r\n            }\r\n            url = `api/recipients/${id}?_method=put`\r\n        }\r\n        else {\r\n            {\r\n                dataNew = {\r\n                    ...dataNew,\r\n                    address: {\r\n                        city_id: data.city.id,\r\n                        line_1: data.country.id === 117 ?\r\n                            `{\"Area\":\"${data.area}\", \"Block\":\"${data.Block}\", \"Jaddah\":\"${data.jaddah ? data.jaddah : \"\"}\" }`\r\n                            :\r\n                            data.line_1,\r\n                        line_2: data.country.id === 117 ?\r\n                            `{\"Street\":\"${data.street}\", \"Building\":\"${data.building}\" }`\r\n                            :\r\n                            data.line_2 ? data.line_2 : '',\r\n                        line_3: data.country.id === 117 ?\r\n                            `{\"Floor\":\"${data.floor ? data.floor : \"\"}\", \"Flat\":\"${data.flat ? data.flat : \"\"}\", \"PCAIID\":\"${data.PCAIID ? data.PCAIID : \"\"}\" }`\r\n                            :\r\n\r\n                            data.line_3 ? data.line_3 : '',\r\n                        main: 1,\r\n                        post_code: data.country.id === 117 ? \"\" : data.post_code ? data.post_code : '',\r\n                        state_code: data.country.id === 117 ? \"\" : data.state_code ? data.state_code : '',\r\n                        type: 'home'\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (type === 'recipientAddress' && status === \"new\") { dataNew = { ...dataNew, outgoing: false, recipient_id: id, } }\r\n        try {\r\n            const responsee = await fetch(\r\n                `${global.apiUrl + url}`,\r\n                {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        Authorization: \"Bearer \" + userToken,\r\n                        \"Content-Type\": \"application/json\",\r\n                        Accept: \"application/json\",\r\n                    },\r\n                    body: JSON.stringify(dataNew),\r\n                }\r\n            );\r\n            const response = await responsee.json();\r\n\r\n            if (response.success) {\r\n                await setVisible(6)\r\n                if ((type === 'recipient' && status === \"update\") || type == \"recipientAddress\") {\r\n                    refreshParent(id)\r\n                }\r\n                else { refreshParent(userID) }\r\n\r\n                if (status === \"new\") {\r\n                    if (type === 'sendAddress') {\r\n                        setData({\r\n                            city: null, line_1: '',\r\n                            line_2: '', line_3: '', post_code: '', state_code: '',\r\n                            area: \"\", Block: \"\", jaddah: \"\", street: \"\", building: \"\", floor: \"\", flat: \"\",\r\n                            PCAIID: \"\", recipient_name_en: \"\", recipient_name_ar: \"\", recipient_phone: \"\", email: \"\",\r\n                        })\r\n                        setSuccessAdd(\"Sending address added.\")\r\n                    }\r\n                    if (type === 'recipient') {\r\n                        setData({\r\n                            country: null, city: null, line_1: '',\r\n                            line_2: '', line_3: '', post_code: '', state_code: '',\r\n                            area: \"\", Block: \"\", jaddah: \"\", street: \"\", building: \"\", floor: \"\", flat: \"\",\r\n                            PCAIID: \"\", recipient_name_en: \"\", recipient_name_ar: \"\", recipient_phone: \"\", email: \"\",\r\n                        })\r\n                        setSuccessAdd(\"Recipient has been added\")\r\n                    }\r\n                    if (type === 'recipientAddress') {\r\n                        setData({\r\n                            country: null, city: null, line_1: '',\r\n                            line_2: '', line_3: '', post_code: '', state_code: '',\r\n                            area: \"\", Block: \"\", jaddah: \"\", street: \"\", building: \"\", floor: \"\", flat: \"\",\r\n                            PCAIID: \"\", recipient_name_en: \"\", recipient_name_ar: \"\", recipient_phone: \"\", email: \"\",\r\n                        })\r\n                        setSuccessAdd(\"Address to the Recipient has been added\")\r\n                    }\r\n\r\n                }\r\n                else if (status === \"update\") {\r\n                    if (type === 'sendAddress') { setSuccessAdd(\"Sending address has been modified.\") }\r\n                    if (type === 'recipientAddress') { setSuccessAdd(\"Recipient address has been modified\") }\r\n                    if (type === 'recipient') { setSuccessAdd(\"Recipient information has been modified\") }\r\n\r\n                }\r\n                closeModal()\r\n            }\r\n            else {\r\n\r\n                setVisible(10)\r\n                setErrorMessage(response.messages)\r\n\r\n\r\n            }\r\n\r\n\r\n        }\r\n        catch (err) { console.log(err); }\r\n        setLoading(false)\r\n    }\r\n    const handleAddressData = (e) => {\r\n        setData({ ...data, [e.target.name]: e.target.value })\r\n        setErrorMessage('')\r\n        setSuccessAdd('')\r\n\r\n    }\r\n    console.log('data', data)\r\n\r\n    return (\r\n\r\n\r\n\r\n        <CModal\r\n            show={openModal}\r\n            onClose={() => closeModal()}\r\n            size=\"lg\"\r\n            color='primary'\r\n        >\r\n            <CModalHeader closeButton>\r\n                <CModalTitle>\r\n                    {title}\r\n\r\n                </CModalTitle>\r\n            </CModalHeader>\r\n\r\n            <CForm onSubmit={(e) => { handleAddAddress(e) }}>\r\n                <CModalBody>\r\n                    <CRow>\r\n                        {type === \"recipient\" &&\r\n                            <>\r\n                                <CCol md=\"6\" lg=\"6\" xl=\"6\">\r\n                                    <CFormGroup row>\r\n                                        <CCol md=\"12\">\r\n                                            <CLabel htmlFor=\"text-input\">Arabic Name</CLabel>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\" md=\"12\">\r\n\r\n                                            <CInput name=\"recipient_name_ar\"\r\n                                                required\r\n                                                autoComplete='off'\r\n                                                onChange={(e) => handleAddressData(e)}\r\n                                                placeholder='Arabic Name'\r\n                                                value={data.recipient_name_ar} />\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n                                </CCol>\r\n                                <CCol md=\"6\" lg=\"6\" xl=\"6\">\r\n                                    <CFormGroup row>\r\n                                        <CCol md=\"12\">\r\n                                            <CLabel htmlFor=\"text-input\">   English Name      </CLabel>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\" md=\"12\">\r\n\r\n                                            <CInput name=\"recipient_name_en\"\r\n                                                required\r\n                                                autoComplete='off'\r\n                                                onChange={(e) => handleAddressData(e)}\r\n                                                placeholder='English Name'\r\n                                                value={data.recipient_name_en} />\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n                                </CCol>\r\n                                <CCol md=\"6\" lg=\"6\" xl=\"6\">\r\n                                    <CFormGroup row>\r\n                                        <CCol md=\"12\">\r\n                                            <CLabel htmlFor=\"text-input\">  Phone  </CLabel>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\" md=\"12\">\r\n\r\n                                            <CInput name=\"recipient_phone\"\r\n                                                required\r\n                                                autoComplete='off'\r\n                                                onChange={(e) => handleAddressData(e)}\r\n                                                placeholder='Phone'\r\n                                                value={data.recipient_phone} />\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n                                </CCol>\r\n                                <CCol md=\"6\" lg=\"6\" xl=\"6\">\r\n                                    <CFormGroup row>\r\n                                        <CCol md=\"12\">\r\n                                            <CLabel htmlFor=\"text-input\">   Email   </CLabel>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\" md=\"12\">\r\n\r\n                                            <CInput name=\"email\"\r\n                                                required\r\n                                                autoComplete='off'\r\n                                                onChange={(e) => handleAddressData(e)}\r\n                                                placeholder='Email'\r\n                                                value={data.email} />\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n                                </CCol>\r\n\r\n\r\n\r\n                            </>\r\n                        }\r\n                        {(type === 'recipient' && status === \"update\") ?\r\n                            <></>\r\n                            :\r\n\r\n                            <>\r\n\r\n                                <CCol md=\"6\" lg=\"6\" xl=\"6\">\r\n\r\n                                    <CFormGroup row>\r\n                                        <CCol md=\"12\">\r\n                                            <CLabel htmlFor=\"text-input\">Country </CLabel>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\" md=\"12\">\r\n                                            {/* <CacheProvider value={cacheRtl}>\r\n                                                <ThemeProvider theme={theme}> */}\r\n                                            <div  >\r\n                                                <Autocomplete\r\n                                                    // id=\"country-select-demo\"\r\n                                                    size=\"small\"\r\n                                                    autoComplete='off'\r\n                                                    options={countries}\r\n                                                    required\r\n                                                    autoHighlight\r\n\r\n                                                    disabled={type === 'sendAddress'}\r\n                                                    rtl='true'\r\n                                                    value={data.country}\r\n                                                    onChange={(event, newValue) => {\r\n                                                        handleCountry(newValue);\r\n                                                    }}\r\n                                                    getOptionLabel={(option) => option.country_name_en + \"  \" + option.country_code}\r\n                                                    renderOption={(props, option) => (\r\n                                                        <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\r\n                                                            <img\r\n                                                                loading=\"lazy\"\r\n                                                                width=\"20\"\r\n                                                                src={`https://flagcdn.com/w20/${option.country_code.toLowerCase()}.png`}\r\n                                                                srcSet={`https://flagcdn.com/w40/${option.country_code.toLowerCase()}.png 2x`}\r\n                                                                alt=\"\"\r\n                                                            />\r\n                                                            {option.country_name_en} ({option.country_code})\r\n                                                        </Box>\r\n                                                    )}\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            required\r\n                                                            autoComplete=\"new-password\"\r\n                                                            {...params}\r\n                                                            label={\"Select Country\"}\r\n                                                            inputProps={{\r\n                                                                ...params.inputProps,\r\n                                                                autoComplete: 'off', // disable autocomplete and autofill\r\n                                                            }}\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n\r\n                                            </div>\r\n                                            {/* </ThemeProvider>\r\n                                            </CacheProvider> */}\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n\r\n                                </CCol>\r\n                                <CCol md=\"6\" lg=\"6\" xl=\"6\">\r\n\r\n                                    <CFormGroup row>\r\n                                        <CCol md=\"12\">\r\n                                            <CLabel htmlFor=\"text-input\">City </CLabel>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\" md=\"12\">\r\n                                            {/* <CacheProvider value={cacheRtl}>\r\n                                                <ThemeProvider theme={theme}> */}\r\n                                            <div  >\r\n                                                <Autocomplete\r\n                                                    id=\"country-select-demo\"\r\n                                                    size=\"small\"\r\n                                                    options={cities}\r\n                                                    autoComplete='off'\r\n                                                    autoHighlight\r\n\r\n                                                    value={data.city}\r\n                                                    onChange={(event, newValue) => {\r\n                                                        handleCity(newValue);\r\n                                                    }}\r\n                                                    getOptionLabel={(option) => option.name_en}\r\n\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            required\r\n                                                            autoComplete=\"new-password\"\r\n                                                            {...params}\r\n                                                            label={\"Select City\"}\r\n                                                            inputProps={{\r\n                                                                ...params.inputProps,\r\n                                                                autoComplete: \"new-password\", // disable autocomplete and autofill\r\n                                                            }}\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n\r\n                                            </div>\r\n                                            {/* </ThemeProvider>\r\n                                            </CacheProvider> */}\r\n\r\n\r\n\r\n\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n\r\n                                </CCol>\r\n                                {data.country && data.country.id === 117 ?\r\n                                    <>\r\n                                        <CCol md=\"6\" lg=\"4\" xl=\"4\">\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"12\">\r\n                                                    <CLabel htmlFor=\"text-input\">   Area   </CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"12\">\r\n\r\n                                                    <CInput name=\"area\"\r\n                                                        required\r\n\r\n                                                        autoComplete='off'\r\n                                                        onChange={(e) => handleAddressData(e)}\r\n                                                        placeholder='Area'\r\n                                                        value={data.area} />\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n                                        </CCol>\r\n                                        <CCol md=\"6\" lg=\"4\" xl=\"4\">\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"12\">\r\n                                                    <CLabel htmlFor=\"text-input\">   Block   </CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"12\">\r\n\r\n                                                    <CInput name=\"Block\"\r\n                                                        required autoComplete='off'\r\n                                                        onChange={(e) => handleAddressData(e)}\r\n                                                        placeholder='Block'\r\n                                                        value={data.Block} />\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n                                        </CCol>\r\n                                        <CCol md=\"6\" lg=\"4\" xl=\"4\">\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"12\">\r\n                                                    <CLabel htmlFor=\"text-input\">   Jaddah   </CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"12\">\r\n\r\n                                                    <CInput name=\"jaddah\" autoComplete='off'\r\n                                                        onChange={(e) => handleAddressData(e)}\r\n                                                        placeholder='Jaddah'\r\n                                                        value={data.jaddah} />\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n                                        </CCol>\r\n                                        <CCol md=\"6\" lg=\"4\" xl=\"4\">\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"12\">\r\n                                                    <CLabel htmlFor=\"text-input\">Street</CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"12\">\r\n\r\n                                                    <CInput name=\"street\"\r\n                                                        required autoComplete='off'\r\n                                                        onChange={(e) => handleAddressData(e)}\r\n                                                        placeholder='Street'\r\n                                                        value={data.street} />\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n                                        </CCol>\r\n                                        <CCol md=\"6\" lg=\"4\" xl=\"4\">\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"12\">\r\n                                                    <CLabel htmlFor=\"text-input\">Building</CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"12\">\r\n\r\n                                                    <CInput name=\"building\"\r\n                                                        required autoComplete='off'\r\n                                                        onChange={(e) => handleAddressData(e)}\r\n                                                        placeholder='Building'\r\n                                                        value={data.building} />\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n                                        </CCol>\r\n                                        <CCol md=\"6\" lg=\"2\" xl=\"2\">\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"12\">\r\n                                                    <CLabel htmlFor=\"text-input\">Floor</CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"12\">\r\n\r\n                                                    <CInput name=\"floor\"\r\n                                                        autoComplete='off'\r\n                                                        onChange={(e) => handleAddressData(e)}\r\n                                                        placeholder='Floor'\r\n                                                        value={data.floor} />\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n                                        </CCol>\r\n                                        <CCol md=\"6\" lg=\"2\" xl=\"2\">\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"12\">\r\n                                                    <CLabel htmlFor=\"text-input\">Flat</CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"12\">\r\n\r\n                                                    <CInput name=\"flat\"\r\n                                                        autoComplete='off'\r\n                                                        onChange={(e) => handleAddressData(e)}\r\n                                                        placeholder='Flat'\r\n                                                        value={data.flat} />\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n                                        </CCol>\r\n                                        <CCol md=\"6\" lg=\"2\" xl=\"2\">\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"12\">\r\n                                                    <CLabel htmlFor=\"text-input\">PCAIID</CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"12\">\r\n\r\n                                                    <CInput name=\"PCAIID\"\r\n                                                        autoComplete='off'\r\n                                                        onChange={(e) => handleAddressData(e)}\r\n                                                        placeholder='PCAIID'\r\n                                                        value={data.PCAIID} />\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n                                        </CCol>\r\n                                    </>\r\n                                    :\r\n                                    <>\r\n                                        <CCol md=\"12\" lg=\"4\" xl=\"4\">\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"12\">\r\n                                                    <CLabel htmlFor=\"text-input\">            Line 1    </CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"12\">\r\n\r\n                                                    <CInput name=\"line_1\"\r\n                                                        required\r\n                                                        autoComplete='off'\r\n                                                        onChange={(e) => handleAddressData(e)}\r\n                                                        placeholder={`Line 1`}\r\n                                                        value={data.line_1} />\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n                                        </CCol>\r\n                                        <CCol md=\"12\" lg=\"4\" xl=\"4\">\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"12\">\r\n                                                    <CLabel htmlFor=\"text-input\">Line 2</CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"12\">\r\n\r\n                                                    <CInput name=\"line_2\"\r\n                                                        autoComplete='off'\r\n                                                        onChange={(e) => handleAddressData(e)}\r\n                                                        placeholder={`Line 2`}\r\n                                                        value={data.line_2} />\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n                                        </CCol>\r\n                                        <CCol md=\"12\" lg=\"4\" xl=\"4\">\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"12\">\r\n                                                    <CLabel htmlFor=\"text-input\">        Line 3    </CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"12\">\r\n\r\n                                                    <CInput name=\"line_3\"\r\n                                                        autoComplete='off'\r\n                                                        onChange={(e) => handleAddressData(e)}\r\n                                                        placeholder={`Line 3`}\r\n                                                        value={data.line_3} />\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n                                        </CCol>\r\n                                        <CCol md=\"3\" lg=\"3\" xl=\"3\">\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"12\">\r\n                                                    <CLabel htmlFor=\"text-input\">   State Code     </CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"12\">\r\n\r\n                                                    <CInput name=\"state_code\"\r\n                                                        onChange={(e) => handleAddressData(e)}\r\n                                                        placeholder={`State Code`}\r\n                                                        value={data.state_code}\r\n                                                        required={countryDetails.stateCode}\r\n                                                        disabled={!countryDetails.stateCode}\r\n                                                    />\r\n\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n                                        </CCol>\r\n                                        <CCol md=\"3\" lg=\"3\" xl=\"3\">\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"12\">\r\n                                                    <CLabel htmlFor=\"text-input\">   Postal Code  </CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"12\">\r\n\r\n                                                    <CInput name=\"post_code\"\r\n                                                        required={countryDetails.postalCode}\r\n                                                        disabled={!countryDetails.postalCode}\r\n                                                        onChange={(e) => handleAddressData(e)}\r\n                                                        placeholder={`Postal Code`}\r\n                                                        value={data.post_code} />\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n                                        </CCol>\r\n                                    </>\r\n                                }\r\n                            </>\r\n                        }\r\n                    </CRow>\r\n                    <CRow className=\"justify-content-center\">\r\n\r\n                        {errorMessage &&\r\n                            <CAlert className='col-lg-12  col-md-12 col-sm-12 col-xs-12 mb-0 '\r\n                                color=\"danger\"\r\n                                // closeButton\r\n                                show={visible}\r\n                                // closeButton\r\n                                onShowChange={setVisible}\r\n                            >\r\n\r\n                                {Object.keys(errorMessage).map((item, i) => (\r\n\r\n                                    <>{errorMessage[item]}<br /></>\r\n\r\n                                ))}\r\n                            </CAlert>}\r\n\r\n                        {succesAdd &&\r\n\r\n                            <CAlert className='col-lg-12  col-md-12 col-sm-12 col-xs-12 mb-0 '\r\n                                color=\"success\"\r\n                                show={visible}\r\n                                // closeButton\r\n                                onShowChange={setVisible}\r\n                            // closeButton\r\n                            >\r\n                                {succesAdd}\r\n                            </CAlert>}\r\n\r\n\r\n                    </CRow>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"primary\" type='submit' onClick={(e) => handleAddAddress(e)}>\r\n                        Save\r\n                        {loading && <>{' '}<i className=\"fa fa-spinner fa-spin\" ></i></>}\r\n                    </CButton>{' '}\r\n                    <CButton color=\"secondary\" onClick={() => closeModal()}>Cancel</CButton>\r\n                </CModalFooter>\r\n            </CForm>\r\n\r\n        </CModal>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default AddAddress\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport 'react-fancybox/lib/fancybox.css'\r\nimport {\r\n    CButton,\r\n\r\n    CModal,\r\n    CModalBody,\r\n    CModalFooter,\r\n    CModalHeader,\r\n    CModalTitle,\r\n} from '@coreui/react'\r\n\r\nimport '../../globalVar'\r\n\r\n\r\nconst DeleteAddress = ({ openModal, closeModal, id, refreshParent, userID }) => {\r\n\r\n    const tokenString = localStorage.getItem(\"token\");\r\n    const userToken = JSON.parse(tokenString);\r\n\r\n    const handleDelete = async () => {\r\n\r\n\r\n        document.getElementById('root').style.opacity = 0.75;\r\n\r\n        try {\r\n            const responsee = await fetch(\r\n                `${global.apiUrl}api/address/${id}`,\r\n                {\r\n                    method: \"DELETE\",\r\n                    headers: {\r\n                        Authorization: \"Bearer \" + userToken,\r\n\r\n                        Accept: \"application/json\",\r\n                    },\r\n\r\n\r\n                }\r\n            );\r\n            const response = await responsee.json();\r\n            console.log('response', response);\r\n            console.log(response);\r\n            if (response.success == true && response.payload) {\r\n                closeModal()\r\n                document.getElementById('root').style.opacity = 1;\r\n                refreshParent(userID)\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n        } catch (err) {\r\n            console.log(err);\r\n\r\n        }\r\n        document.getElementById('root').style.opacity = 1;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n\r\n\r\n        <CModal\r\n            show={openModal}\r\n            onClose={() => closeModal()}\r\n            size=\"sm\"\r\n            color='danger'\r\n        >\r\n            <CModalHeader closeButton>\r\n                <CModalTitle></CModalTitle>\r\n            </CModalHeader>\r\n            <CModalBody>\r\n                Are You Sure Want To Delete Address\r\n\r\n            </CModalBody>\r\n            <CModalFooter>\r\n                <CButton color=\"danger\" onClick={() => handleDelete()}>Delete</CButton>{' '}\r\n                <CButton color=\"secondary\" onClick={() => closeModal()}>Cancel</CButton>\r\n            </CModalFooter>\r\n        </CModal>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default DeleteAddress\r\n","import React, { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n\r\nconst Address = ({ Address }) => {\r\n    const [t, i18n] = useTranslation();\r\n    return (\r\n        <div className=\"row myAddressRow\">\r\n            <div className='col-md-12 addressCol'>\r\n                <div className=\" addressDetail \">\r\n\r\n                    <h6 className=\" f-w-400\"><b>Country  :</b>{Address.city?.country.country_name_en}{' / '}{Address.country_code}\r\n                    </h6>\r\n                </div>\r\n                <div className=\"addressDetail\">\r\n\r\n                    <h6 className=\"  f-w-400\"><b>City  :</b>{Address.city.name_en}\r\n                    </h6>\r\n                </div>\r\n\r\n                {Address.city.country_id === 117 ?\r\n                    <>\r\n                        <div className=\"addressDetail\">\r\n\r\n                            <h6 className=\"  f-w-400\"><b>Area  :</b>{JSON.parse(Address.line_1).Area}\r\n                            </h6>\r\n                        </div>\r\n                        <div className=\"addressDetail\">\r\n\r\n                            <h6 className=\" f-w-400\"><b>Block  :</b>{JSON.parse(Address.line_1).Block}\r\n                            </h6>\r\n                        </div>\r\n                        <div className=\"addressDetail\">\r\n\r\n                            <h6 className=\" f-w-400\"><b>Jaddah  :</b>{JSON.parse(Address.line_1).Jaddah ? JSON.parse(Address.line_1).Jaddah : \"-\"}\r\n                            </h6>\r\n                        </div>\r\n                        <div className=\"addressDetail\">\r\n\r\n                            <h6 className=\"  f-w-400\"><b>Street  :</b>{JSON.parse(Address.line_2).Street ? JSON.parse(Address.line_2).Street : \"-\"}\r\n                            </h6>\r\n                        </div>\r\n                        <div className=\" addressDetail\">\r\n\r\n                            <h6 className=\"  f-w-400\"><b>Building  :</b>{JSON.parse(Address.line_2).Building}\r\n                            </h6>\r\n                        </div>\r\n                        <div className=\" addressDetail\">\r\n\r\n                            <h6 className=\"  f-w-400\"><b>Floor  :</b>{JSON.parse(Address.line_3).Floor ? JSON.parse(Address.line_3).Floor : \"-\"}\r\n                            </h6>\r\n                        </div>\r\n                        <div className=\" addressDetail\">\r\n\r\n                            <h6 className=\"  f-w-400\"><b>Flat  :</b>{JSON.parse(Address.line_3).Flat ? JSON.parse(Address.line_3).Flat : \"-\"}\r\n                            </h6>\r\n                        </div>\r\n                        <div className=\" addressDetail\">\r\n\r\n                            <h6 className=\"  f-w-400\"><b>PCAIID  :</b>{JSON.parse(Address.line_3).PCAIID ? JSON.parse(Address.line_3).PCAIID : \"-\"}\r\n                            </h6>\r\n                        </div>\r\n\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <div className=\"addressDetail  \">\r\n\r\n                            <h6 className=\" f-w-400\">   <b>Line 1 :</b> {Address.line_1}\r\n                            </h6>\r\n                        </div>\r\n                        {Address.line_2 && <div className=\"addressDetail \">\r\n\r\n                            <h6 className=\"  f-w-400\"> <b>Line 2 :</b> {Address.line_2}\r\n                            </h6>\r\n                        </div>}\r\n                        {Address.line_3 && <div className=\" addressDetail \">\r\n\r\n                            <h6 className=\"  f-w-400\">  <b>Line 3 :</b> {Address.line_3}\r\n                            </h6>\r\n                        </div>}\r\n                        {Address.post_code && <div className=\" addressDetail \">\r\n\r\n                            <h6 className=\"  f-w-400\"><b>   Postal Code :</b> {Address.post_code}\r\n                            </h6>\r\n                        </div>}\r\n                        {Address.state_code && <div className=\" addressDetail \">\r\n\r\n                            <h6 className=\"  f-w-400\">  <b>   State Code :</b> {Address.state_code}\r\n                            </h6>\r\n                        </div>}\r\n                    </>\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Address;"],"sourceRoot":""}