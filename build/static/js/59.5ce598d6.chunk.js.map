{"version":3,"sources":["views/services/allServices/allServices.js"],"names":["AllServices","history","useHistory","useState","visible","setVisible","setTotalPages","fetchedData","setfetchedData","errorMessage","setErrorMessage","succesAdd","setSuccessAdd","loading","setLoading","tokenString","localStorage","getItem","userToken","JSON","parse","userId","pageStatus","setPageStatus","facebook","twitter","linkedin","instagram","email","address","phone","upData","types","setTypes","activeType","setActiveType","categories","setCategories","activeCat","setActiveCat","getUnique","array","key","property","item","Array","from","reduce","map","k","has","set","Map","values","useEffect","a","e","fetch","global","apiUrl","method","headers","Authorization","Accept","responsee","json","response","console","log","temp","service","index","push","checked","id","name","type","rate","min","max","dripfeed","refill","category","Math","ceil","length","message","removeItem","clear","fetchSettings","handleUpdateProfile","preventDefault","filter","body","stringify","services","errors","Object","keys","i","parseInt","split","err","checkUnCheck","target","checkUnCheckall","status","fields","className","md","lg","xl","color","onClick","onChange","htmlFor","custom","value","handleCat","handleType","items","bordered","striped","sorter","columnFilter","itemsPerPage","pagination","scopedSlots","onSubmit","show","onShowChange","xs","sm","block","to"],"mappings":"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","file":"static/js/59.5ce598d6.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCardFooter,\n  CCol,\n  CContainer,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CPagination,\n  CDataTable,\n  CSelect,\n  CLink,\n  CRow\n} from '@coreui/react'\nimport 'react-phone-number-input/style.css'\nimport PhoneInput from 'react-phone-number-input'\nimport CIcon from '@coreui/icons-react'\nimport './allServices.scss'\n\nimport {CAlert} from '@coreui/react'\nimport { useHistory } from \"react-router-dom\";\n  \nimport '../../../globalVar'\nconst AllServices = () => {\n  let history = useHistory();\n  const [visible, setVisible] = useState(10)\n  const [currentPage, setCurrentPage] = useState(1)\n  const [totalPages, setTotalPages] = useState()\n  const[fetchedData,setfetchedData]=useState([])\n  const[refresh,setRefresh]=useState('')\n  const [errorMessage, setErrorMessage] = useState();\n  \n  const[succesAdd,setSuccessAdd]=useState()\n  const[loading,setLoading]=useState('')\n  const tokenString = localStorage.getItem(\"token\");\n  const userToken = JSON.parse(tokenString);\n  const userId = localStorage.getItem(\"user_id\");\n  const user_id = JSON.parse(userId);\n  const [pageStatus,setPageStatus]=useState(0)\nconst [upData,setUpData]=useState({\n  facebook:'',\ntwitter:'',\nlinkedin:'',\ninstagram:'',\nemail:'',\naddress:'',phone:''\n})\nconst{ facebook,\ntwitter,\nlinkedin,\ninstagram,\nemail,\naddress,phone\n}=upData;\nconst [types,setTypes]=useState([])\nconst [activeType,setActiveType]=useState('0')\nconst [categories,setCategories]=useState([])\nconst [activeCat,setActiveCat]=useState('0')\n\nfunction getUnique(array, key) {\n  if (typeof key !== 'function') {\n    const property = key;\n    key = function(item) { return item[property]; };\n  }\n  return Array.from(array.reduce(function(map, item) {\n    const k = key(item);\n    if (!map.has(k)) map.set(k, item);\n    return map;\n  }, new Map()).values());\n}\n\n\n\nuseEffect(async()=>{\n  const fetchSettings=async(e)=>{\n\n\n  \n  try {\n    const responsee = await fetch(\n      `${global.apiUrl}/services/getAllServices`,\n      {\n        method: \"GET\",\n        headers: {\n          Authorization: \"Bearer \" + userToken,\n\n          Accept: \"application/json\",\n        },\n\n    \n      }\n    );\n    const response = await responsee.json();\n    \n    console.log(response);\n\n    if(response){\n      let temp=[]\n     \n     await response.map((service,index)=>{\n       \n      temp.push({\n        checked:false,\n        index:index,\n        id:service.service,\n        name: service.name,\n        type: service.type,\n        rate: service.rate,\n        min: service.min,\n        max: service.max,\n        dripfeed:service.dripfeed,\n        refill:service.refill,\n        category:service.category})\n  \n     })\n     await setTotalPages(Math.ceil(response.length/12))\n        setfetchedData(temp)\n        setTypes(getUnique(response, 'type'))\n        setCategories(getUnique(response, 'category'))\n     }\n\n  // if(response){\n  //  setfetchedData(response)\n  //  setTotalPages(Math.ceil(response.length/12))\n  //  console.log(Math.ceil(response.length/12))\n  // }\n    if(response.message&&response.message==\"Unauthorized or invalid token!\"){\n    localStorage.removeItem(\"token\");\n    localStorage.clear()\n \n  history.push(\"/login\");\n    }\n   \n  } catch (err) {\n    console.log(err);\n   \n  }\n\n  // setLoading(false)\n  \n  \n  }\n\n  fetchSettings()\n},[])\n\n// console.log('procceed',fetchedData);\n\n\n\nconst handleData=(e)=>{\n  setUpData({...upData,[e.target.name]:e.target.value})\n\n  setErrorMessage('')\n  setSuccessAdd('')\n}\n\nconst handleCat=(e)=>{\n setActiveCat(e.target.value)\n setActiveType('0')\n  // setErrorMessage('')\n  // setSuccessAdd('')\n}\nconst handleType=(e)=>{\n  setActiveType(e.target.value)\n  setActiveCat('0')\n   // setErrorMessage('')\n   // setSuccessAdd('')\n }\n \n\n\nconst handleUpdateProfile=async(e)=>{\n  e.preventDefault()\n  setLoading(true)\n  \n  setErrorMessage('')\n  setSuccessAdd('')\n\n\n  let temp=[]\n     \n  await fetchedData.filter(item=>item.checked==true).map((service,index)=>{\n    \n   temp.push({\n    \n    service:service.id,\n     name: service.name,\n     type: service.type,\n     rate: service.rate,\n     min: service.min,\n     max: service.max,\n     dripfeed:service.dripfeed,\n     refill:service.refill,\n     category:service.category})\n\n  })\n\n\ntry {\n  const responsee = await fetch(\n    `${global.apiUrl}/services/storeSelectedServices`,\n    {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + userToken,\n                   \"Content-Type\": \"application/json\",\n                  //'Access-Control-Allow-Origin': 'https://localhost:3000',\n                  // 'Access-Control-Allow-Credentials': 'true',\n        Accept: \"application/json\",\n      },\n      body:JSON.stringify({services:temp})\n      ,\n  \n    }\n  );\n  const response = await responsee.json();\n  console.log('response',response);\n  console.log(response);\n  setVisible(10)\n  if(response.message&&response.message==\"Services stored successfully!\"){\n    await  setVisible(6)\n    setSuccessAdd(\"Services stored successfully!\")\n//  setRefresh(!refresh)\n//  setVisible(6)\n  }\n  else{\n   \n    let errors=[]\n\n    await Object.keys(response.errors).map((item, i) => {\n            console.log(   temp[parseInt(response.errors[item][0].split('.')[1])].service,i )  \n            // setErrorMessage({...errorMessage,[`error${i}`]:`${temp[parseInt(response.errors[item][0].split('.')[1])].service} already stored`})\n            \n         errors.push({err:`Service ${temp[parseInt(response.errors[item][0].split('.')[1])].service+\" \"+temp[parseInt(response.errors[item][0].split('.')[1])].name} Already Stored`})     \n  }        \n           \n     )\n     setVisible(10)\n     setErrorMessage(errors)\n\n    \n    }\n  \n \n} catch (err) {\n  console.log(err);\n \n}\n\nsetLoading(false)\n}\n\nconst[maxIndex,setMaxIndex]=useState()\n// useEffect(\n//   ()=>{\n//     setMaxIndex(currentPage*12)\n\n//   },[currentPage])\n  const checkUnCheck=async(e,index)=>{\n    setErrorMessage('')\n      await setfetchedData(\n        fetchedData.map(item => \n            item.index === index \n            ? \n            {...item, checked :e.target.checked} \n            \n            : item \n    ))\n\n  }\n  \n  const checkUnCheckall=async(e,status)=>{\n   console.log(status)\n   setErrorMessage('')\n   if ( activeCat=='0'&&activeType=='0'){\n setfetchedData(\n      fetchedData.map(item => \n          item.index == '0'\n          ? \n          {...item, checked :status} \n          \n          :   {...item, checked :status}  \n  ))\n  }\n  else if(activeCat=='0'&&activeType!=='0'){\nsetfetchedData(\n      fetchedData.map(item => \n          item.type === activeType\n          ? \n          {...item, checked :status} \n          \n          : {item}  \n  ))\n   \n  }\n  else if(activeCat!=='0'&&activeType=='0'){\n  \n      setfetchedData(\n      fetchedData.map(item => \n          item.category === activeCat\n          ? \n          {...item, checked :status} \n          \n          :   {...item, checked :item.checked}  \n  ))\n   \n  }\n   else{\n      setfetchedData(\n      fetchedData.map(item => \n          item.index == '0'\n          ? \n          {...item, checked :status} \n          \n          :   {...item, checked :status}  \n  ))\n   \n   }\n    \n\n  \n \n}\n\n  \n  const setFilter=()=>{\n  if ( activeCat=='0'&&activeType=='0'){\n    return  fetchedData\n  }\n  else if(activeCat=='0'&&activeType!=='0'){\n    return fetchedData.filter(item=>item.type==activeType)\n  }\n  else if(activeCat!=='0'&&activeType=='0'){\n    return fetchedData.filter(item=>item.category==activeCat)\n  }\n   else{\n    return  fetchedData\n   }\n    \n\n  }\n  \n  \n  \n  console.log(errorMessage)\n  \n  console.log(fetchedData)\n  const fields = ['checked','index','id','name','type','rate','min','max','dripfeed', 'refill', 'category']\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center register-cont\">\n   \n      <CContainer>\n\n     {pageStatus==0&&<>\n      {fetchedData&&   <CCard>\n          <CCardHeader>\n          <CRow className=\" row-gap-15 \">\n          \n            <CCol md=\"3\" lg=\"3\" xl=\"3\" className=\"justify-content-center align-self-center align-items-center place-items-center text-capitalize\">\n            All Services\n            </CCol>\n            <CCol md=\"9\" lg=\"9\" xl=\"9\" >\n            {/* className=\"row-gap-15 col-gap-15 \" */}\n                  <CButton color=\"success\"  className='col-lg-4  col-md-4 col-sm-12 col-xs-12 updatebtn'\n           onClick={()=>setPageStatus(1)} >view selected \n                  </CButton>\n            </CCol>\n            <CCol md=\"4\" lg=\"3\" xl=\"3\" >\n          {fetchedData&& <div><input type='checkbox' id='chekall'\n           \n           onChange={(e)=>checkUnCheckall(e,e.target.checked)}\n           /> <label htmlFor='chekall'>Check all</label></div>}\n\n          </CCol>\n          <CCol md=\"4\" lg=\"4\" xl=\"4\" >\n            {categories.length>0&&\n             <CSelect custom name=\"select\" id=\"select\" value={activeCat} onChange={(e)=>handleCat(e)}>\n               <option value='0' >All Categories</option>\n         {   categories.map((item)=>{\n              return(\n                <option key={item.category} value={item.category}>{item.category}</option>\n              )\n            })}\n            \n            </CSelect>\n            }\n    \n          </CCol>\n          <CCol md=\"4\" lg=\"4\" xl=\"4\" >\n         \n       {types.length>0&&\n             <CSelect custom name=\"select\" id=\"select\" value={activeType} onChange={(e)=>handleType(e)}>\n               <option value='0' >All Types</option>\n         {   types.map((item)=>{\n              return(\n                <option key={item.type} value={item.type}>{item.type}</option>\n              )\n            })}\n            \n            </CSelect>\n            }\n\n          </CCol>\n            </CRow>\n          </CCardHeader>\n          <CCardBody>\n          <CRow>\n      {/* <CCol lg={12}>\n        {fetchedData&&fetchedData.map((service,index)=>{\n          return(<>\n            {index>=maxIndex-12&&index<maxIndex&&<div key={service.id}>{service.id}</div> }\n          </>\n          \n            \n          )\n        })}\n             \n              </CCol> */}\n              {/* <CCol lg={6}>\n              <table className=\"table table-striped table-hover\">\n                <tbody>\n             \n                        <tr >\n                          <td>Facebook</td>\n                          <td><strong></strong></td>\n                        </tr>\n                        <tr >\n                          <td>Instagram</td>\n                          <td><strong></strong></td>\n                        </tr>\n                        <tr >\n                          <td>Twitter</td>\n                          <td><strong></strong></td>\n                        </tr>\n                        <tr >\n                          <td>Linkedin</td>\n                          <td><strong></strong></td>\n                        </tr>\n                </tbody>\n              </table>\n              </CCol> */}\n    </CRow>  \n    {/* {totalPages&&      <CPagination\n            align=\"center\"\n            addListClass=\"some-class\"\n            activePage={currentPage}\n            pages={totalPages}\n            onActivePageChange={setCurrentPage}\n            className='faqsPage'\n          />} */}\n\n\n          <CRow className='servicesTabel'>\n   { fetchedData.length>0&&      <CDataTable\n              items={\n                setFilter()\n                \n                }\n              fields={fields}\n              bordered\n             striped \n             sorter\n             columnFilter\n              itemsPerPage={12}\n              pagination\n              scopedSlots = {{\n                'checked':\n                  (item)=>(\n                    <td>\n                      {/* <CBadge color={getBadge(item.status)}>\n                        {item.status}\n                      </CBadge> */}\n                      {item.checked==true?\n                      <><input\n                      onChange={(e)=>checkUnCheck(e,item.index)}\n                      \n                      type='checkbox' checked={item.checked}></input></>\n                      :<><input checked={item.checked} onChange={(e)=>checkUnCheck(e,item.index)} type='checkbox'></input></>}\n                    </td>\n                  )\n\n              }}\n            />\n}\n\n\n          </CRow>\n          </CCardBody>\n        </CCard>\n       \n}\n     </>}\n    \n\n\n{fetchedData&&pageStatus==1&&<>\n\n\n         {/* mx-4 */}\n            <CCard className=\"\">\n\n            <CForm onSubmit={(e)=>{handleUpdateProfile(e)}}>\n\n            <CCardHeader>\n          <CRow className=\" row-gap-15\">\n            \n            <CCol md=\"6\" lg=\"6\" xl=\"6\" className=\"justify-content-center align-self-center align-items-center place-items-center text-capitalize\">\n           Store Selected services <strong>({fetchedData.filter(item=>item.checked==true).length})</strong>\n            </CCol>\n            <CCol md=\"6\" lg=\"6\" xl=\"6\">\n            <CButton color=\"success\"  className='col-lg-6  col-md-6 col-sm-12 col-xs-12 updatebtn'\n           onClick={()=>setPageStatus(0)} >Back\n                  </CButton>\n            </CCol>\n            </CRow>\n          </CCardHeader>\n\n              <CCardBody className=\"p-4\">\n{/*           \n              <CRow className=\"justify-content-center\">\n              <CCol md=\"6\" lg=\"6\" xl=\"6\">\n              <CInputGroup className=\"mb-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                        F\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput\n                    onChange={handleData}\n                    defaultValue={fetchedData.facebook}\n                    \n                    name='facebook'\n                    type=\"url\" placeholder=\"Facebook\"  />\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                        T\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput\n                    onChange={handleData}\n                    defaultValue={fetchedData.twitter}\n                    \n                    name='twitter'\n                    type=\"url\" placeholder=\"Twitter\"  />\n                  </CInputGroup>\n               \n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                       L\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput\n                    onChange={handleData}\n                    defaultValue={fetchedData.linkedin}\n                    \n                    name='linkedin'\n                    type=\"url\" placeholder=\"Linked in\"  />\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                       L\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput\n                    onChange={handleData}\n                    defaultValue={fetchedData.instagram}\n                    \n                    name='instagram'\n                    type=\"url\" placeholder=\"Instagram\"  />\n                  </CInputGroup>\n                 </CCol>\n          <CCol md=\"6\" lg=\"6\" xl=\"6\">\n                  \n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                        @\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput\n                    onChange={handleData}\n                    defaultValue={fetchedData.email}\n                    \n                    name='email'\n                    type=\"email\" placeholder=\"Email\"  />\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                      <CIcon name=\"cil-location-pin\" />\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput\n                    onChange={handleData}\n                    defaultValue={fetchedData.address}\n\n                    name='address'\n                    type=\"text\" placeholder=\"Address\"  />\n                  </CInputGroup>\n               \n                  \n\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText> <CIcon name=\"cil-phone\" />\n                       </CInputGroupText>\n                    </CInputGroupPrepend>\n                    \n                    <PhoneInput className='form-control'\n                    // onChange={handleData}\n                       \n                    name='phone'\n      placeholder=\"Phone Number\"\n      value={fetchedData.phone}\n      // defaultCountry=\"SA\"\n      onChange={setValue}\n      \n      />\n                  </CInputGroup>\n                  </CCol>\n      \n                 \n                 </CRow> */}\n                      <CRow className='servicesTabel'>\n   { fetchedData&&      <CDataTable\n              items={\n               fetchedData.filter(item=>item.checked==true)\n                 \n                }\n              fields={fields}\n              bordered\n             striped \n\n              itemsPerPage={12}\n              pagination\n              scopedSlots = {{\n                'checked':\n                  (item)=>(\n                    <td>\n                      {/* <CBadge color={getBadge(item.status)}>\n                        {item.status}\n                      </CBadge> */}\n                      {item.checked?\n                      <><input\n                      onChange={(e)=>checkUnCheck(e,item.index)}\n                      \n                      type='checkbox' checked></input></>\n                      :<><input  onChange={(e)=>checkUnCheck(e,item.index)} type='checkbox'></input></>}\n                    </td>\n                  )\n              }\n            \n            }\n         \n            \n          \n            />\n}\n\n\n          </CRow>\n              </CCardBody>\n              <CCardFooter className=\"p-4\">\n                <CRow className=\"justify-content-center\">\n         \n                   { errorMessage&& \n                   <CAlert className='col-lg-12  col-md-12 col-sm-12 col-xs-12 '\n                   color=\"danger\"\n                   // closeButton\n                   show={visible}\n                   // closeButton\n                   onShowChange={setVisible}\n              > \n            {errorMessage.map((err)=>{\n              return(\n                <>{err.err}<br/></>  \n              )\n            })}\n               {/* {     Object.keys(errorMessage).map((item, i) => (\n              \n         <>{errorMessage[item]}<br/></>  \n            \n                      \n                \n          ))} */}\n          </CAlert>\n          \n          }\n          \n              \n              \n              \n                { succesAdd&& \n                \n                \n                <CAlert className='col-lg-12  col-md-12 col-sm-12 col-xs-12 '\n                color=\"success\"\n                show={visible}\n                // closeButton\n                onShowChange={setVisible}\n                // closeButton\n              >\n            {succesAdd}\n              </CAlert>\n              \n              \n              }\n            \n                  <CCol  md=\"6\" lg=\"6\" xl=\"6\" xs=\"12\" sm=\"12\" >\n               { fetchedData.filter(item=>item.checked==true).length>0&&   <CButton color=\"success\" block type='submit'>Save\n                  {loading&&<>{' '}<i className=\"fa fa-spinner fa-spin\" ></i></>} </CButton>}\n                  </CCol>\n                \n                </CRow>\n              </CCardFooter>\n              <CRow><CCol md='12' className='p-4'><CAlert className='col-md-12 ' color=\"info\">\n               Hint :&nbsp; Go to &nbsp; \n                <CLink className=\"alert-link\" to='/Services/StoredServices'>Stored Services</CLink>.\n                &nbsp;  For More Updates\n              </CAlert></CCol> </CRow>\n              </CForm>\n\n\n            </CCard>\n       \n       \n\n\n\n</>}\n    \n\n\n\n\n\n\n     \n      </CContainer>\n    </div>\n  )\n}\n\nexport default AllServices\n"],"sourceRoot":""}