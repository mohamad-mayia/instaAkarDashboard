{"version":3,"sources":["views/cities/AddNewCity/AddNewCity.js"],"names":["createTheme","direction","createCache","key","stylisPlugins","prefixer","rtlPlugin","AddNewCity","useTranslation","t","i18n","history","useHistory","useState","visible","setVisible","errorMessage","setErrorMessage","countries","setCountries","country","setCountry","succesAdd","setSuccessAdd","loading","setLoading","tokenString","localStorage","getItem","userToken","JSON","parse","name_en","name_ar","code","upData","setUpData","useEffect","a","e","fetch","global","apiUrl","method","headers","Authorization","Accept","responsee","json","response","success","payload","console","log","fetchCountries","handleCountry","value","handleData","target","name","handleAddCity","preventDefault","body","stringify","country_id","id","errors","className","md","lg","xl","color","onClick","goBack","language","xs","sm","onSubmit","row","htmlFor","required","onChange","placeholder","size","options","autoHighlight","dir","rtl","event","newValue","autoComplete","getOptionLabel","option","country_name_en","country_code","renderOption","props","component","sx","mr","flexShrink","width","src","toLowerCase","srcSet","alt","renderInput","params","label","inputProps","show","onShowChange","Object","keys","map","item","i","block","type"],"mappings":"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","file":"static/js/51.bdbb7ac0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCardFooter,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CPagination,\r\n  CDataTable,\r\n  CSelect,\r\n  CFormText,\r\n  CTextarea,\r\n  CFormGroup,\r\n  CLabel,\r\n  CSwitch,\r\n  CInputFile,\r\n  CLink,\r\n  CFade,\r\n  CCollapse,\r\n  CBadge,\r\n  CRow\r\n} from '@coreui/react'\r\nimport 'react-phone-number-input/style.css'\r\nimport PhoneInput from 'react-phone-number-input'\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\n\r\nimport rtlPlugin from 'stylis-plugin-rtl';\r\nimport { prefixer } from 'stylis';\r\nimport { CacheProvider } from '@emotion/react';\r\nimport createCache from '@emotion/cache';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport './AddNewCity.scss'\r\n\r\nimport { CAlert } from '@coreui/react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport '../../../globalVar'\r\nconst theme = createTheme({\r\n  direction: 'rtl', // Both here and <body dir=\"rtl\">\r\n});\r\n// Create rtl cache\r\nconst cacheRtl = createCache({\r\n  key: 'muirtl',\r\n  stylisPlugins: [prefixer, rtlPlugin],\r\n});\r\n// import { set } from 'core-js/core/dict'\r\n// import MIN_SAFE_INTEGER from 'core-js/fn/number/min-safe-integer'\r\nconst AddNewCity = () => {\r\n  const [t, i18n] = useTranslation();\r\n  let history = useHistory();\r\n  const [visible, setVisible] = useState(10)\r\n\r\n  const [fetchedData, setfetchedData] = useState([])\r\n  const [refresh, setRefresh] = useState('')\r\n  const [errorMessage, setErrorMessage] = useState();\r\n  const [countries, setCountries] = useState([])\r\n  const [country, setCountry] = useState(null)\r\n  const [succesAdd, setSuccessAdd] = useState()\r\n  const [loading, setLoading] = useState('')\r\n  const tokenString = localStorage.getItem(\"token\");\r\n  const userToken = JSON.parse(tokenString);\r\n  const [pickedImg, setPickedImg] = useState('')\r\n\r\n\r\n  const [upData, setUpData] = useState({\r\n    name_en: '',\r\n    name_ar: '',\r\n\r\n    code: \"\"\r\n\r\n\r\n  })\r\n  const { name_en,\r\n    name_ar,\r\n    code\r\n\r\n  } = upData;\r\n  useEffect(async () => {\r\n\r\n    const fetchCountries = async (e) => {\r\n      try {\r\n        const responsee = await fetch(`${global.apiUrl}api/countries`,\r\n          {\r\n            method: \"GET\",\r\n            headers: {\r\n              Authorization: \"Bearer \" + userToken,\r\n              Accept: \"application/json\",\r\n            },\r\n          }\r\n        );\r\n        const response = await responsee.json();\r\n        if (response.success) {\r\n          setCountries(response.payload)\r\n\r\n        }\r\n\r\n      } catch (err) { console.log(err); }\r\n\r\n    }\r\n\r\n    fetchCountries()\r\n\r\n\r\n  }, [])\r\n\r\n  const handleCountry = async (value) => {\r\n    setCountry(value)\r\n  }\r\n\r\n\r\n  const handleData = (e) => {\r\n    setUpData({ ...upData, [e.target.name]: e.target.value })\r\n\r\n    setErrorMessage('')\r\n    setSuccessAdd('')\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleAddCity = async (e) => {\r\n    e.preventDefault()\r\n    setLoading(true)\r\n\r\n    setErrorMessage('')\r\n    setSuccessAdd('')\r\n\r\n    try {\r\n      const responsee = await fetch(\r\n        `${global.apiUrl}api/cities/addNewCity`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            Authorization: \"Bearer \" + userToken,\r\n            \"Content-Type\": \"application/json\",\r\n            // 'Access-Control-Allow-Origin': 'https://localhost:3000',\r\n            // 'Access-Control-Allow-Credentials': 'true',\r\n            Accept: \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            name_ar: name_ar,\r\n            name_en: name_en,\r\n            country_id: country.id,\r\n            code: code\r\n\r\n          })\r\n          ,\r\n\r\n        }\r\n      );\r\n      const response = await responsee.json();\r\n      console.log('response', response);\r\n      console.log(response);\r\n      setVisible(10)\r\n      if (response.success) {\r\n        await setVisible(6)\r\n        setSuccessAdd(\"City has been added successfully\")\r\n\r\n\r\n        setUpData({\r\n          name_ar: '',\r\n          name_en: '',\r\n\r\n          code: \"\"\r\n        })\r\n\r\n      }\r\n      else {\r\n\r\n        setVisible(10)\r\n        setErrorMessage(response.errors)\r\n\r\n\r\n      }\r\n\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n\r\n    }\r\n\r\n    setLoading(false)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"c-app c-default-layout flex-row align-items-center justify-content-center register-cont\">\r\n\r\n      <CContainer>\r\n\r\n\r\n        <CCard className=\"\">\r\n\r\n\r\n\r\n          <CCardHeader>\r\n            <CRow className=\" row-gap-15\">\r\n\r\n              <CCol md=\"6\" lg=\"6\" xl=\"6\" className=\"justify-content-center align-self-center align-items-center place-items-center text-capitalize\">\r\n                <strong>  Add New City</strong>\r\n              </CCol>\r\n              <CCol md=\"6\" lg=\"6\" xl=\"6\" className='row-gap-15 col-gap-15'>\r\n\r\n                <CButton color=\"success\" className='col-lg-6  col-md-6 col-sm-12 col-xs-12 updatebtn'\r\n                  onClick={() => history.goBack()} >{i18n.language == 'ar' ? `رجوع` : `Back`}\r\n                </CButton>\r\n\r\n              </CCol>\r\n            </CRow>\r\n          </CCardHeader>\r\n\r\n          <CRow>\r\n            <CCol xs=\"12\" sm=\"12\" md=\"12\" className=''>\r\n              <CForm onSubmit={(e) => { handleAddCity(e) }}>\r\n                <CCardBody>\r\n                  <CCard>\r\n                    <CCardBody>\r\n                      <CRow >\r\n\r\n\r\n                        {/* className=\"justify-content-center\" */}\r\n\r\n                        <CCol md='12'> <strong>  City Information:</strong></CCol>\r\n\r\n\r\n                        <CCol md=\"6\" lg=\"6\" xl=\"6\">\r\n                          <CFormGroup row>\r\n                            <CCol md=\"12\">\r\n                              <CLabel htmlFor=\"text-input\">{`English Name`}</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"12\">\r\n\r\n                              <CInput name=\"name_en\"\r\n                                required\r\n                                onChange={handleData}\r\n                                placeholder={`English Name`}\r\n                                value={upData.name_en} />\r\n                            </CCol>\r\n                          </CFormGroup>\r\n                        </CCol>\r\n                        <CCol md=\"6\" lg=\"6\" xl=\"6\">\r\n                          <CFormGroup row>\r\n                            <CCol md=\"12\">\r\n                              <CLabel htmlFor=\"text-input\">{`Arabic Name`}</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"12\">\r\n\r\n                              <CInput name=\"name_ar\"\r\n\r\n                                onChange={handleData}\r\n                                placeholder={`Arabic Name`}\r\n                                value={upData.name_ar} />\r\n                            </CCol>\r\n                          </CFormGroup>\r\n                        </CCol>\r\n                        <CCol md=\"6\" lg=\"6\" xl=\"6\">\r\n\r\n                          <CFormGroup row>\r\n                            <CCol md=\"12\">\r\n                              <CLabel htmlFor=\"text-input\">{`Country`}</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"12\">\r\n                              {/* <CacheProvider value={cacheRtl}>\r\n                                <ThemeProvider theme={theme}> */}\r\n                              <div >\r\n                                <Autocomplete\r\n                                  id=\"country-select-demo\"\r\n                                  size=\"small\"\r\n                                  options={countries}\r\n                                  required\r\n                                  autoHighlight\r\n                                  dir='rtl'\r\n                                  rtl='true'\r\n                                  value={country}\r\n                                  onChange={(event, newValue) => {\r\n                                    handleCountry(newValue);\r\n                                  }}\r\n                                  autoComplete='off'\r\n                                  getOptionLabel={(option) => option.country_name_en + \"  \" + option.country_code}\r\n                                  renderOption={(props, option) => (\r\n                                    <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\r\n                                      <img\r\n                                        loading=\"lazy\"\r\n                                        width=\"20\"\r\n                                        src={`https://flagcdn.com/w20/${option.country_code.toLowerCase()}.png`}\r\n                                        srcSet={`https://flagcdn.com/w40/${option.country_code.toLowerCase()}.png 2x`}\r\n                                        alt=\"\"\r\n                                      />\r\n                                      {option.country_name_en} ({option.country_code})\r\n                                    </Box>\r\n                                  )}\r\n                                  renderInput={(params) => (\r\n                                    <TextField\r\n                                      required\r\n                                      {...params}\r\n                                      label={\"Choose Country\"}\r\n                                      inputProps={{\r\n                                        ...params.inputProps,\r\n                                        autoComplete: 'off', // disable autocomplete and autofill\r\n                                      }}\r\n                                    />\r\n                                  )}\r\n                                />\r\n\r\n                              </div>\r\n                              {/* </ThemeProvider>\r\n                              </CacheProvider> */}\r\n\r\n\r\n\r\n\r\n                            </CCol>\r\n                          </CFormGroup>\r\n\r\n                        </CCol>\r\n                        <CCol md=\"6\" lg=\"6\" xl=\"6\">\r\n                          <CFormGroup row>\r\n                            <CCol md=\"12\">\r\n                              <CLabel htmlFor=\"text-input\">{`City Code`}</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"12\">\r\n\r\n                              <CInput name=\"code\"\r\n\r\n                                onChange={handleData}\r\n                                placeholder={`City Code`}\r\n                                value={upData.code} />\r\n                            </CCol>\r\n                          </CFormGroup>\r\n                        </CCol>\r\n                      </CRow>\r\n\r\n\r\n                    </CCardBody>\r\n                    <CCardFooter className=\"p-4\">\r\n                      <CRow className=\"justify-content-center\">\r\n\r\n                        {errorMessage &&\r\n                          <CAlert className='col-lg-12  col-md-12 col-sm-12 col-xs-12 '\r\n                            color=\"danger\"\r\n                            // closeButton\r\n                            show={visible}\r\n                            // closeButton\r\n                            onShowChange={setVisible}\r\n                          >\r\n                            {Object.keys(errorMessage).map((item, i) => (\r\n\r\n                              <>{errorMessage[item]}<br /></>\r\n\r\n\r\n\r\n                            ))}\r\n                            {/* {errorMessage && errorMessage.map((item, i) => (\r\n\r\n                              <>{errorMessage[i]}<br /></>\r\n\r\n                            ))} */}\r\n                          </CAlert>}\r\n\r\n                        {succesAdd &&\r\n\r\n                          <CAlert className='col-lg-12  col-md-12 col-sm-12 col-xs-12 '\r\n                            color=\"success\"\r\n                            show={visible}\r\n                            // closeButton\r\n                            onShowChange={setVisible}\r\n                          // closeButton\r\n                          >\r\n                            {succesAdd}\r\n                          </CAlert>}\r\n\r\n                        <CCol md=\"6\" lg=\"6\" xl=\"6\" xs=\"12\" sm=\"12\" >\r\n                          {<CButton color=\"success\" block type='submit'>\r\n                            {t('Save')}\r\n                            {loading && <>{' '}<i className=\"fa fa-spinner fa-spin\" ></i></>} </CButton>}\r\n                        </CCol>\r\n\r\n                      </CRow>\r\n                    </CCardFooter>\r\n                  </CCard>\r\n\r\n\r\n\r\n                </CCardBody>\r\n\r\n              </CForm>\r\n            </CCol>\r\n          </CRow>\r\n\r\n        </CCard>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </CContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddNewCity\r\n"],"sourceRoot":""}