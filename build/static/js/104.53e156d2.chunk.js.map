{"version":3,"sources":["views/contactUs/Replies.js"],"names":["ConatctUs","history","useHistory","useState","small","setSmall","data","setData","refresh","setRefresh","setErrorMessage","currentPage","setTotalPages","setSuccessAdd","pageStatus","tokenString","localStorage","getItem","userToken","JSON","parse","id","message","url","useEffect","a","e","fetch","global","apiUrl","method","headers","Authorization","Accept","responsee","status","json","response","console","log","success","temp","payload","map","item","index","push","created_at","slice","removeItem","clear","fetchFAQs","itemToDelete","setItemToDelete","handleDelete","document","getElementById","style","opacity","xl","md","className","length","items","fields","label","key","hover","striped","sorter","pagination","itemsPerPage","columnFilter","scopedSlots","color","onClick","handleShowModal","dangerouslySetInnerHTML","__html","show","onClose","size","closeButton"],"mappings":"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","file":"static/js/104.53e156d2.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport {\r\n    CBadge,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CDataTable,\r\n    CRow,\r\n    CPagination,\r\n    CSelect,\r\n    CButton,\r\n    CModal,\r\n    CModalBody,\r\n    CModalFooter,\r\n    CModalHeader,\r\n    CModalTitle,\r\n    CAlert\r\n} from '@coreui/react'\r\nimport '../../globalVar'\r\n// import ReplayForm from './ReplayForm/ReplayForm'\r\nimport './contactUs.scss'\r\n\r\n\r\nconst ConatctUs = () => {\r\n    const history = useHistory()\r\n    const [visible, setVisible] = useState(10)\r\n    const [small, setSmall] = useState(false)\r\n    const [dataText, setDataText] = useState('')\r\n    const [data, setData] = useState([])\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [errorMessage, setErrorMessage] = useState();\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [totalPages, setTotalPages] = useState()\r\n    const [succesAdd, setSuccessAdd] = useState()\r\n    const [loading, setLoading] = useState('')\r\n    const [pageStatus, setPageStatus] = useState(0)\r\n    const tokenString = localStorage.getItem(\"token\");\r\n    const userToken = JSON.parse(tokenString);\r\n    const [modal, setModal] = useState(false)\r\n    const [activeItem, setActiveItem] = useState({ id: '', message: '' })\r\n    const [url, setUrl] = useState(`contactUs/viewAllContactUsRequests?`)\r\n    const handleSetItemToreplay = async (item) => {\r\n        console.log(item)\r\n        await setActiveItem({ id: item.id, message: item.message })\r\n        setDataText('')\r\n        await setModal(!modal)\r\n    }\r\n    const closeModal = () => {\r\n        setModal(false)\r\n        setDataText('')\r\n        setActiveItem({ id: '', message: '' })\r\n\r\n    }\r\n    const handleUrlFilter = (e) => {\r\n        setCurrentPage(1)\r\n        if (e.target.value == '0') { setUrl(`contactUs/viewAllContactUsRequests?`) }\r\n        else if (e.target.value == 'active') { setUrl(`contactUs/viewAllContactUsRequests?seen=1&`) }\r\n\r\n        else if (e.target.value == 'notActive') { setUrl(`contactUs/viewAllContactUsRequests?seen=0&`) }\r\n\r\n        else { setUrl(`contactUs/viewAllContactUsRequests?`) }\r\n\r\n    }\r\n    useEffect(async () => {\r\n        const fetchFAQs = async (e) => {\r\n\r\n\r\n\r\n            try {\r\n                const responsee = await fetch(\r\n                    `${global.apiUrl}api/replies`,\r\n                    {\r\n                        method: \"GET\",\r\n                        headers: {\r\n                            Authorization: \"Bearer \" + userToken,\r\n                            // \"Content-Type\": \"application/json\",\r\n                            //'Access-Control-Allow-Origin': 'https://localhost:3000',\r\n                            // 'Access-Control-Allow-Credentials': 'true',\r\n                            Accept: \"application/json\",\r\n                        },\r\n\r\n\r\n                    }\r\n                );\r\n                if (responsee.status == 204) {\r\n                    setData([])\r\n                    setTotalPages()\r\n                }\r\n                const response = await responsee.json();\r\n                // console.log('response',response);\r\n                console.log('faqs', response);\r\n                if (response.success) {\r\n\r\n                    let temp = []\r\n\r\n                    await response.payload.map((item, index) => {\r\n\r\n                        temp.push({\r\n\r\n\r\n                            ...item,\r\n\r\n\r\n\r\n                            \"الرد\": item.message,\r\n                            \"التاريخ\": item.created_at.slice(0, 10),\r\n\r\n                        })\r\n\r\n                    })\r\n                    setData(temp)\r\n\r\n                    //  setTotalPages(response.payload.last_page)\r\n\r\n                }\r\n                if (response.message && response.message == \"Unauthenticated.\") {\r\n                    localStorage.removeItem(\"token\");\r\n                    localStorage.clear()\r\n\r\n                    history.push(\"/login\");\r\n                }\r\n\r\n            } catch (err) {\r\n                console.log(err);\r\n\r\n            }\r\n\r\n            // setLoading(false)\r\n\r\n\r\n        }\r\n\r\n        fetchFAQs()\r\n    }, [currentPage, refresh, url])\r\n\r\n\r\n\r\n    const [itemToDelete, setItemToDelete] = useState('')\r\n    const handleShowModal = (item) => {\r\n        setSmall(!small)\r\n        setItemToDelete(item)\r\n    }\r\n    const handleDelete = async () => {\r\n        setErrorMessage('')\r\n        setSuccessAdd('')\r\n        document.getElementById('root').style.opacity = 0.75;\r\n\r\n        try {\r\n            const responsee = await fetch(\r\n                `${global.apiUrl}api/replies/${itemToDelete.id}`,\r\n                {\r\n                    method: \"DELETE\",\r\n                    headers: {\r\n                        Authorization: \"Bearer \" + userToken,\r\n\r\n                        Accept: \"application/json\",\r\n                    },\r\n\r\n\r\n                }\r\n            );\r\n            // const response = await responsee.json();\r\n            // console.log('response', response);\r\n\r\n            if (responsee.status == 200) {\r\n                setSmall(!small)\r\n                document.getElementById('root').style.opacity = 1;\r\n\r\n                setRefresh(!refresh)\r\n\r\n            }\r\n            // else{\r\n            // setErrorMessage(response.errors)\r\n            // }\r\n\r\n        } catch (err) {\r\n            console.log(err);\r\n\r\n        }\r\n        document.getElementById('root').style.opacity = 1;\r\n\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <CRow>\r\n            {pageStatus == 0 &&\r\n                <CCol xl={12}>\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            <CCol md='12'><strong>Replys</strong></CCol>\r\n                            {/*\r\n              <CCol md=\"4\" lg=\"4\" xl=\"4\" >\r\n\r\n                <CSelect custom name=\"select\" onChange={(e) => handleUrlFilter(e)}>\r\n                  <option value='0' >Filter (All Requestes) </option>\r\n                  <option value='active' >Seen</option>\r\n\r\n                  <option value='notActive' >Unseen</option>\r\n\r\n                </CSelect>\r\n\r\n\r\n              </CCol> */}\r\n\r\n                        </CCardHeader>\r\n                        <CCardBody className='usersTabel'>\r\n                            {data.length > 0 && <CDataTable\r\n                                items={data}\r\n                                fields={['id', \"contact_id\",\r\n                               {  label:'Reply',key:'الرد'},\r\n                               {label:'History',key:'التاريخ'}\r\n                               , {label:\"Actions\",key:'عمليات'}]}\r\n                                hover\r\n                                striped\r\n                                sorter\r\n                                pagination\r\n                                itemsPerPage={12}\r\n                                columnFilter\r\n                                // clickableRows\r\n                                // onRowClick={(item) => history.push(`/users/${item.id}`)}\r\n                                scopedSlots={{\r\n\r\n                                    'عمليات':\r\n                                        (item) => (\r\n                                            <td>\r\n                                                <CBadge className=\"p-1 m-1 badg-click\" color=\"danger\"\r\n                                                    onClick={() => handleShowModal(item)}\r\n                                                > Delete   </CBadge>\r\n\r\n\r\n                                            </td>\r\n\r\n\r\n                                        ),\r\n                                    'الرد':\r\n                                        (item) => (\r\n                                            <td dangerouslySetInnerHTML={{ __html: item.message }}>\r\n\r\n                                            </td>\r\n\r\n\r\n                                        ),\r\n\r\n\r\n                                }}\r\n                            />}\r\n\r\n                        </CCardBody>\r\n                    </CCard>\r\n                </CCol>\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            <CModal\r\n                show={small}\r\n                onClose={() => setSmall(!small)}\r\n                size=\"sm\"\r\n                color='danger'>\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle> Delete Message </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    {`Are you sure you want to delete Reply`}\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"danger\" onClick={() => handleDelete()}>Delete</CButton>{' '}\r\n                    <CButton color=\"secondary\" onClick={() => setSmall(!small)}>Cancel</CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n\r\n\r\n\r\n\r\n\r\n        </CRow>\r\n    )\r\n}\r\n\r\nexport default ConatctUs\r\n"],"sourceRoot":""}