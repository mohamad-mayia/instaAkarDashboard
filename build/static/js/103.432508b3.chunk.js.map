{"version":3,"sources":["views/cities/cities.js"],"names":["createTheme","direction","createCache","key","stylisPlugins","prefixer","rtlPlugin","Cities","history","useHistory","useTranslation","i18n","useState","small","setSmall","countries","setCountries","setErrorMessage","cities","setCities","setSuccessAdd","pageStatus","tokenString","localStorage","getItem","userToken","JSON","parse","country","setCountry","useEffect","a","e","fetch","global","apiUrl","method","headers","Authorization","Accept","responsee","json","response","success","payload","console","log","fetchCountries","handleCountry","value","fetchCities","id","status","temp","map","item","index","push","code","name_ar","name_en","itemToDelete","setItemToDelete","handleDelete","document","getElementById","style","opacity","xl","className","md","lg","language","color","onClick","row","xs","size","options","required","autoHighlight","dir","rtl","onChange","event","newValue","getOptionLabel","option","country_name_en","country_code","renderOption","props","component","sx","mr","flexShrink","loading","width","src","toLowerCase","srcSet","alt","renderInput","params","label","inputProps","autoComplete","length","items","fields","hover","striped","pagination","sorter","itemsPerPage","columnFilter","clickableRows","scopedSlots","handleShowModal","show","onClose","closeButton"],"mappings":"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","file":"static/js/103.432508b3.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport {\r\n  CBadge,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CDataTable,\r\n  CRow,\r\n  CPagination,\r\n  CButton,\r\n  CForm,\r\n  CFormGroup,\r\n  CLabel,\r\n  CSelect,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CCardFooter\r\n} from '@coreui/react'\r\nimport { CAlert } from '@coreui/react'\r\nimport '../../globalVar'\r\nimport './cities.scss'\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\n\r\nimport rtlPlugin from 'stylis-plugin-rtl';\r\nimport { prefixer } from 'stylis';\r\nimport { CacheProvider } from '@emotion/react';\r\nimport createCache from '@emotion/cache';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\n\r\nimport { useTranslation } from 'react-i18next';\r\nconst theme = createTheme({\r\n  direction: 'rtl', // Both here and <body dir=\"rtl\">\r\n});\r\n// Create rtl cache\r\nconst cacheRtl = createCache({\r\n  key: 'muirtl',\r\n  stylisPlugins: [prefixer, rtlPlugin],\r\n});\r\n\r\nconst Cities = () => {\r\n  const history = useHistory()\r\n  const [t, i18n] = useTranslation();\r\n  const [modal, setModal] = useState(true)\r\n  const [small, setSmall] = useState(false)\r\n  const [large, setLarge] = useState(false)\r\n\r\n\r\n  const [countries, setCountries] = useState([])\r\n  const [refresh, setRefresh] = useState(false)\r\n  const [errorMessage, setErrorMessage] = useState();\r\n  const [cities, setCities] = useState([])\r\n  const [succesAdd, setSuccessAdd] = useState()\r\n  const [loading, setLoading] = useState('')\r\n  const [pageStatus, setPageStatus] = useState(0)\r\n  const tokenString = localStorage.getItem(\"token\");\r\n  const userToken = JSON.parse(tokenString);\r\n\r\n  const [visible, setVisible] = useState(10)\r\n  const [country, setCountry] = useState(null)\r\n\r\n  useEffect(async () => {\r\n\r\n    const fetchCountries = async (e) => {\r\n      try {\r\n        const responsee = await fetch(`${global.apiUrl}api/countries`,\r\n          {\r\n            method: \"GET\",\r\n            headers: {\r\n              Authorization: \"Bearer \" + userToken,\r\n              Accept: \"application/json\",\r\n            },\r\n          }\r\n        );\r\n        const response = await responsee.json();\r\n        if (response.success) {\r\n          setCountries(response.payload)\r\n\r\n        }\r\n\r\n      } catch (err) { console.log(err); }\r\n\r\n    }\r\n\r\n    fetchCountries()\r\n\r\n\r\n  }, [])\r\n\r\n  const handleCountry = async (value) => {\r\n    setCountry(value)\r\n    if (value != null) {\r\n      fetchCities(value.id)\r\n    }\r\n    else {\r\n      setCities([])\r\n    }\r\n\r\n  }\r\n\r\n  const fetchCities = async (id) => {\r\n    try {\r\n      const responsee = await fetch(\r\n        `${global.apiUrl}api/cities/getCityByCountryId?country_id=${id}`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            Authorization: \"Bearer \" + userToken,\r\n            Accept: \"application/json\",\r\n          },\r\n        }\r\n      );\r\n      if (responsee.status == 204) {\r\n\r\n      }\r\n      const response = await responsee.json();\r\n      if (response.success) {\r\n\r\n        let temp = []\r\n\r\n        await response.payload.map((item, index) => {\r\n\r\n          temp.push({\r\n            ...item,\r\n            'الرمز': item.code ? item.code : \"-\",\r\n            'الاسم العربي': item.name_ar ? item.name_ar : \"-\",\r\n            'الاسم الانكليزي': item.name_en,\r\n\r\n          })\r\n\r\n        })\r\n\r\n        setCities(temp)\r\n\r\n      }\r\n\r\n    } catch (err) { console.log(err); }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  const [itemToDelete, setItemToDelete] = useState('')\r\n  const handleShowModal = (item) => {\r\n    setSmall(true)\r\n    setItemToDelete(item)\r\n  }\r\n  const handleDelete = async () => {\r\n    setErrorMessage('')\r\n    setSuccessAdd('')\r\n    document.getElementById('root').style.opacity = 0.75;\r\n\r\n    try {\r\n      const responsee = await fetch(\r\n        `${global.apiUrl}api/cities/deleteCity?id=${itemToDelete.id}`,\r\n        {\r\n          method: \"DELETE\",\r\n          headers: {\r\n            Authorization: \"Bearer \" + userToken,\r\n            Accept: \"application/json\",\r\n          },\r\n\r\n\r\n        }\r\n      );\r\n      const response = await responsee.json();\r\n\r\n      if (response.success == true && response.payload) {\r\n        setSmall(false)\r\n        document.getElementById('root').style.opacity = 1;\r\n\r\n        fetchCities(country.id)\r\n\r\n      }\r\n      // else{\r\n      // setErrorMessage(response.errors)\r\n      // }\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n\r\n    }\r\n    document.getElementById('root').style.opacity = 1;\r\n\r\n  }\r\n\r\n  return (\r\n\r\n    <CRow>\r\n      {pageStatus == 0 &&\r\n        <CCol xl={12}>\r\n          <CCard>\r\n            <CCardHeader>\r\n              <CRow className=\" row-gap-15\">\r\n                <CCol md=\"6\" lg=\"6\" xl=\"6\" className=\"justify-content-center align-self-center align-items-center place-items-center text-capitalize\">\r\n                  {i18n.language == 'ar' ? \"المدن\" : \"Cities\"}\r\n                </CCol>\r\n\r\n                <CCol md=\"6\" lg=\"6\" xl=\"6\" className='row-gap-15 col-gap-15'>\r\n\r\n\r\n                  <CButton color=\"success\" className='col-lg-6  col-md-6 col-sm-12 col-xs-12 updatebtn'\r\n                    onClick={() => history.push('/Cities/AddNewCity')} >{i18n.language == 'ar' ? `إضافة دولة جديدة` : `Add New Country`}\r\n                  </CButton>\r\n                </CCol>\r\n\r\n              </CRow>\r\n\r\n            </CCardHeader>\r\n            <CCardBody className='usersTabel'>\r\n              <CRow >\r\n                <CCol md=\"6\" lg=\"6\" xl=\"6\">\r\n\r\n                  <CFormGroup row>\r\n                    <CCol xs=\"12\" md=\"12\">\r\n                      {/* <CacheProvider value={cacheRtl}>\r\n                        <ThemeProvider theme={theme}> */}\r\n                      <div >\r\n                        <Autocomplete\r\n                          id=\"country-select-demo\"\r\n                          size=\"small\"\r\n                          options={countries}\r\n                          required\r\n                          autoHighlight\r\n                          dir='rtl'\r\n                          rtl='true'\r\n                          value={country}\r\n                          onChange={(event, newValue) => {\r\n                            handleCountry(newValue);\r\n                          }}\r\n                          getOptionLabel={(option) => option.country_name_en + \"  \" + option.country_code}\r\n                          renderOption={(props, option) => (\r\n                            <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\r\n                              <img\r\n                                loading=\"lazy\"\r\n                                width=\"20\"\r\n                                src={`https://flagcdn.com/w20/${option.country_code.toLowerCase()}.png`}\r\n                                srcSet={`https://flagcdn.com/w40/${option.country_code.toLowerCase()}.png 2x`}\r\n                                alt=\"\"\r\n                              />\r\n                              {option.country_name_en} ({option.country_code})\r\n                            </Box>\r\n                          )}\r\n                          renderInput={(params) => (\r\n                            <TextField\r\n                              required\r\n                              {...params}\r\n                              label={\"Choose Country\"}\r\n                              inputProps={{\r\n                                ...params.inputProps,\r\n                                autoComplete: 'off', // disable autocomplete and autofill\r\n                              }}\r\n                            />\r\n                          )}\r\n                        />\r\n\r\n                      </div>\r\n                      {/* </ThemeProvider>\r\n                      </CacheProvider> */}\r\n\r\n\r\n\r\n\r\n                    </CCol>\r\n                  </CFormGroup>\r\n\r\n                </CCol>\r\n\r\n              </CRow>\r\n              {cities.length > 0 ?\r\n\r\n\r\n                <CDataTable\r\n                  items={cities}\r\n                  fields={['id',\r\n                    { label: \"Arabic Name\", key: 'الاسم العربي' },\r\n                    { label: \"English Name\", key: 'الاسم الانكليزي' },\r\n                    { label: \"Code\", key: \"الرمز\" },\r\n                    { label: \"Actions\", key: 'عمليات' }]}\r\n                  hover\r\n                  striped\r\n                  pagination\r\n\r\n                  sorter\r\n                  itemsPerPage={20}\r\n                  columnFilter\r\n                  clickableRows\r\n\r\n                  scopedSlots={{\r\n                    'عمليات':\r\n                      (item) => (\r\n                        <td>\r\n                          <CBadge className=\"p-1 m-1 badg-click\" color=\"danger\"\r\n                            onClick={() => handleShowModal(item)}\r\n                          >{i18n.language == 'ar' ? \"حذف\" : \"Delete\"}</CBadge>\r\n\r\n                          <CBadge className=\"p-1  m-1 badg-click\" color=\"info\"\r\n                            onClick={() => history.push(`/Country/${item.country.id}/CityUpdate/${item.id}`)}  >\r\n                            {i18n.language == 'ar' ? \"تعديل .....\" : \"Update....\"}</CBadge>\r\n\r\n                        </td>\r\n                      ),\r\n\r\n                  }}\r\n                />\r\n\r\n                :\r\n                null\r\n              }\r\n              {!country && <CRow>\r\n                <CCol md='12'>\r\n                  <CAlert className='col-lg-12  col-md-12 col-sm-12 col-xs-12 '\r\n                    color=\"warning\"\r\n                  // closeButton\r\n                  // show={visible}\r\n                  // closeButton\r\n                  // onShowChange={setVisible}\r\n                  >\r\n                    {i18n.language == 'ar' ? \"اختر دولة لعرض المدن الخاصة بها\" : \"Select a country to view its cities\"}\r\n                  </CAlert>\r\n                </CCol>\r\n              </CRow>\r\n              }\r\n\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      }\r\n\r\n      <CModal\r\n        show={small}\r\n        onClose={() => setSmall(!small)}\r\n        size=\"sm\"\r\n        color='danger'\r\n      >\r\n        <CModalHeader closeButton>\r\n          <CModalTitle>{i18n.language == 'ar' ? \"حذف مدينة\" : \"Delete City\"}</CModalTitle>\r\n        </CModalHeader>\r\n        <CModalBody>\r\n          {`Are you sure you want to delete City (${itemToDelete.name_en})`}\r\n\r\n        </CModalBody>\r\n        <CModalFooter>\r\n          <CButton color=\"danger\" onClick={() => handleDelete()}>{i18n.language == 'ar' ? \"حذف\" : \"Delete\"}</CButton>{' '}\r\n          <CButton color=\"secondary\" onClick={() => setSmall(!small)}>{i18n.language == 'ar' ? \"الغاء\" : \"Cancel\"}</CButton>\r\n        </CModalFooter>\r\n      </CModal>\r\n\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default Cities\r\n"],"sourceRoot":""}